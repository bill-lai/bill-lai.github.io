{"title":"nodejs模块(CommonJS)与es6模块的区别","id":"fa55d32a37ff470c6dfa","mtime":1644891761675,"ctime":1644891305967,"issues":{"number":17,"commentsUrl":"https://api.github.com/repos/bill-lai/bill-lai.github.io/issues/17/comments","reactionsUrl":"https://api.github.com/repos/bill-lai/bill-lai.github.io/issues/17/reactions"},"head":null,"foot":null,"dirs":[{"leave":2,"title":"CommonJS","children":[{"leave":3,"title":"模块","children":[]},{"leave":3,"title":"导出","children":[]},{"leave":3,"title":"导入","children":[]}]},{"leave":2,"title":"ES6 Modules","children":[{"leave":3,"title":"模块","children":[]},{"leave":3,"title":"导出","children":[]},{"leave":3,"title":"导入","children":[]}]},{"leave":2,"title":"区别","children":[{"leave":3,"title":"动态与静态","children":[]},{"leave":3,"title":"值拷贝与动态映射","children":[]}]}],"body":"<h2 id=\"commonjs\">CommonJS</h2>\n<p>&emsp;&emsp;<code>CommonJS</code>是由<code>JavaScript</code>社区在2009提出的包含模块、文件、IO、控制台在内的一系列标准。在<code>Node.js</code>的实现中采用<code>CommonJS</code>标准的一部分，并在它的基础上进行了一些调整。我们听说的<code>CommonJS</code>模块和<code>Node.js</code>中的实现并不完全一样，现在一般谈到<code>CommonJS</code>其实就是<code>Node.js</code>的版本，而非原始版本。</p>\n<h3 id=\"模块\">模块</h3>\n<p>&emsp;&emsp;<code>CommonJS</code>中规定每个文件就是一个文件模块，使用<code>require</code>函数引入使用模块。</p>\n<pre><code class=\"language-js\"><span class=\"token comment\">// add.js</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'current file add.js'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// main.js</span>\n<span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./add.js'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//current file add.js</span>\n</code></pre>\n<h3 id=\"导出\">导出</h3>\n<p>&emsp;&emsp;在<code>CommonJS</code>中导出是一个模块向外唯一暴露自身的方式。在<code>CommonJS</code>中通过<code>module.exports</code>导出模块内容。<code>module</code>是<code>CommonJS</code>内部定义的一个对象，存放模块信息，可以看做每个模块的顶部都有一个<code>module</code>对象定义，这个对象有个<code>exports</code>属性。模块内除了<code>module</code>定义外还会声明<code>exports</code>定义，<code>exports</code>是指向<code>module.exports</code>的。所以需要注意，对<code>exports</code>赋值时<code>module.exports</code>并不会更改。</p>\n<pre><code class=\"language-js\"><span class=\"token comment\">// add.js</span>\n<span class=\"token comment\">// 模块导出可以看做</span>\n<span class=\"token comment\">// var module = { exports: {} }</span>\n<span class=\"token comment\">// var exports = module.exports</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'module.exports add'</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 直接更改相当于对exports变量的更改，并不会真实更改到module.exports</span>\nexports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'exports add'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// main.js</span>\n<span class=\"token keyword\">const</span> add <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./add.js'</span><span class=\"token punctuation\">)</span> \nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// module.exports add</span>\n</code></pre>\n<h3 id=\"导入\">导入</h3>\n<p>&emsp;&emsp;在<code>CommonJS</code>中使用<code>require</code>方法进行模块导入。<code>require</code>导入的模块只有第一次加载才会执行模块的内容，后续都是获取到第一次执行模块内容是生成的<code>module.exports</code>。<code>require</code>函数可以接受表达式，也就是动态的。</p>\n<pre><code class=\"language-js\"><span class=\"token comment\">// add.js</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'run add.js'</span><span class=\"token punctuation\">)</span>\nmodule<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// demo1.js</span>\n<span class=\"token keyword\">const</span> add <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./add.js'</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// demo2.js</span>\n<span class=\"token keyword\">const</span> add <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./add.js'</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// main.js</span>\n<span class=\"token keyword\">const</span> moduleNames <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'./demo1.js'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'./demo2.js'</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">/**\n * run add.js\n * 3\n * 4\n **/</span>\nmoduleNames<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>require<span class=\"token punctuation\">)</span>\n</code></pre>\n<h2 id=\"es6-modules\">ES6 Modules</h2>\n<p>&emsp;&emsp;在2015年6月，<code>TC39</code>标准委员会正式发布了<code>ES6</code>，从此<code>JavaScipt</code>语言具备模块这一特征.</p>\n<h3 id=\"模块-1\">模块</h3>\n<p>&emsp;&emsp;<code>ES6 Module</code>也是将每个文件作为一个单独的模块。<code>import</code>和<code>export</code>作为保留关键字在<code>ES6</code>版本中也加入了进来。当使用<code>ES6</code>模块时会自动采用严格模式，在<code>ES5</code>使用<code>use strict</code>开启。</p>\n<pre><code class=\"language-js\"><span class=\"token comment\">// add.js</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'current file add.js'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// main.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">'add.js'</span> <span class=\"token comment\">//current file add.js</span>\n</code></pre>\n<h3 id=\"导出-1\">导出</h3>\n<p>&emsp;&emsp;<code>ES6 Module</code>使用<code>export</code>关键字导出模块，可以使用命名导出和默认导出两种方式。命名导出有凉中方式，第一种是将声明和导出一起执行，第二种是先声明再用同一个<code>export</code>导出。使用命名导出时可以使用<code>as</code>关键字对变量重命名。默认导出只能有一个。</p>\n<pre><code class=\"language-js\"><span class=\"token comment\">// demoA.js</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'demoA'</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">+</span> b\n\n<span class=\"token comment\">// demoB.js</span>\n<span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'demoB'</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">+</span> b\n\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> add <span class=\"token keyword\">as</span> addB <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> add\n</code></pre>\n<h3 id=\"导入-1\">导入</h3>\n<p>&emsp;&emsp;<code>ES6 Module</code>使用<code>import</code>关键字导入模块。与<code>require</code>类似，<code>import</code>导入的模块只有第一次加载才会执行模块的内容。在<code>import</code>关键字后面使用大括号将要导入的变量名包裹起来，与导出类似可以使用<code>as</code>关键字对变量重命名。可以使用<code>import * as &lt;myModule&gt;</code>来讲模块的所有变量导入到<code>&lt;myModule&gt;</code>对象中。对于默认导出可以使用<code>import</code>后面跟变量名的方式引入，也可以使用大括号包裹，导出在<code>default</code>的变量中。另外导入可以多种方式并用，用逗号隔开。</p>\n<pre><code class=\"language-js\"><span class=\"token comment\">// demo1.js</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'run demo1.js'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'demo1'</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// demo2</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">'./demo1'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'demo2'</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">-</span> b\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// main.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">as</span> add <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./demo1.js'</span>\n<span class=\"token keyword\">import</span> diff<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> name <span class=\"token keyword\">as</span> diffName <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./demo2.js'</span>\n</code></pre>\n<p>&emsp;&emsp;<code>ES6 Module</code>还支持复合写法，比如将一个模块导入后马上导出，一般是专门用在模块的入口文件。</p>\n<pre><code class=\"language-js\"><span class=\"token comment\">// a.js</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">+</span> b\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function-variable function\">diff</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">-</span> b\n\n<span class=\"token comment\">// main.js</span>\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> add<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">as</span> diff <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./a.js'</span>\n</code></pre>\n<h2 id=\"区别\">区别</h2>\n<p>&emsp;&emsp;上面我们介绍的<code>CommonJS</code>和<code>ES6 Module</code>两种形式的模块我们开发中经常会使用，这里我们对比一下它们各自的特征。</p>\n<h3 id=\"动态与静态\">动态与静态</h3>\n<p>&emsp;&emsp;<code>CommonJS</code>与<code>ES6 Module</code>最大的区别在于前者对模块的依赖是动态的，后者是静态的。动态是指模块依赖关系的建立是在代码运行时建立的。静态是指模块依赖关系是在编译节点建立的。<br>&emsp;&emsp;<code>CommonJS</code>中<code>require</code>引用的路径可以动态指定，支持表达式，可以通过<code>if</code>语句来判断是否加载某个模块。<code>module.exports</code>也是个对象，可以随时动态的添加导出变量。所以在代码执行前都是没办法确定依赖关系的。<code>ES6 Module</code>的<code>import</code>和<code>module</code>导入导出都是声明式的，不支持表达式，而且导入导出都必须在模块的顶层作用域（无法放置到<code>if</code>语句中）。所以<code>ES6 Module</code>在编译阶段就能分析出依赖关系。<code>ES6 Module</code>相对与<code>CommonJS</code>来说有下面2点优点</p>\n<ul>\n<li>死代码的检测和排除。什么是死代码就是指我们引入了某个库但是只使用了某些模块，其他代码并没有使用到。通过静态分析就可以在打包的时候去掉这些死代码，减少打包的体积。</li>\n<li>模块变量类型检查。<code>ES6 Module</code>的静态模块解构有助于确认模块之间传递的值和接口的正确性</li>\n</ul>\n<h3 id=\"值拷贝与动态映射\">值拷贝与动态映射</h3>\n<p>&emsp;&emsp;在导入一个模块时，<code>CommonJS</code>是将导出值进行一份拷贝赋值给变量；而在<code>ES6 Module</code>中则是值的动态映射，并且这个映射是无法更改的。值拷贝意味着当引用模块内的变量变化时，引用者使用的变量可能是旧的，并且可能是错的，而动态映射则没这个问题，引用模块抛出的永远是模块内变量的映射而已。比如看下方<code>CommonJS</code>和<code>ES6 Module</code>的两个例子</p>\n<pre><code class=\"language-js\"><span class=\"token comment\">// demo.js</span>\n<span class=\"token keyword\">var</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  count<span class=\"token operator\">:</span> count<span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">add</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// main.js</span>\n<span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./demo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>count\n<span class=\"token keyword\">const</span> add <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./demo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>add\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0</span>\n<span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0</span>\ncount <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 拷贝值可更改</span>\n</code></pre>\n<pre><code class=\"language-js\"><span class=\"token comment\">// demo.js</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// main.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> count<span class=\"token punctuation\">,</span> add <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./demo'</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0</span>\n<span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span>\n<span class=\"token comment\">// count += 1 SyntaxError</span>\n</code></pre>\n<p>&emsp;&emsp;完结撒花。</p>\n","desc":"CommonJS\n  CommonJS是由JavaScript社区在2009提出的包含模块、文件、IO、控制台在内的一系列标准。在Node.js的实现中采用CommonJS标准的一部分，并在它的基础上进行了一些调整。我们听说的CommonJS模块和Node.js中的实现并不完全一样，现在一般谈到Co","column":{"title":"javascript笔录","id":"8c7c4031e54f97dba0b7"}}