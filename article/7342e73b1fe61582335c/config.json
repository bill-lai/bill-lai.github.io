{"title":"ES知识点记录","id":"7342e73b1fe61582335c","mtime":1647933463318,"ctime":1647933301705,"issues":{"number":29,"commentsUrl":"https://api.github.com/repos/bill-lai/bill-lai.github.io/issues/29/comments","reactionsUrl":"https://api.github.com/repos/bill-lai/bill-lai.github.io/issues/29/reactions"},"head":null,"foot":null,"dirs":[{"leave":1,"title":"记录","children":[{"leave":2,"title":"ES6","children":[{"leave":3,"title":"Intl","children":[]},{"leave":3,"title":"判断是否在模块中","children":[]},{"leave":3,"title":"Number.EPSILON","children":[]},{"leave":3,"title":"Math.hypot","children":[]}]},{"leave":2,"title":"ES7","children":[{"leave":3,"title":"求幂运算符","children":[]}]},{"leave":2,"title":"ES8","children":[{"leave":3,"title":"String padding","children":[]},{"leave":3,"title":"Object.getOwnProperDescriptors","children":[]},{"leave":3,"title":"Atomics","children":[]}]},{"leave":2,"title":"es9","children":[{"leave":3,"title":"u 修饰符","children":[]},{"leave":3,"title":"y修饰符","children":[]},{"leave":3,"title":"s 修饰符：dotAll 模式","children":[]},{"leave":3,"title":"后行断言","children":[]},{"leave":3,"title":"具名组匹配","children":[]},{"leave":3,"title":"正则匹配索引","children":[]},{"leave":3,"title":"用 for...await...of 的语法来操作","children":[]}]},{"leave":2,"title":"ES10","children":[{"leave":3,"title":"flat flatMap","children":[]},{"leave":3,"title":"Object.fromEntries","children":[]},{"leave":3,"title":"Symbol#description","children":[]}]},{"leave":2,"title":"ES11","children":[{"leave":3,"title":"String.prototype.matchAll","children":[]},{"leave":3,"title":"Promise","children":[]},{"leave":3,"title":"globalThis","children":[]},{"leave":3,"title":"空位合并操作符(??)","children":[]},{"leave":3,"title":"可选链式操作符（?.）","children":[]},{"leave":3,"title":"bigInt","children":[]}]},{"leave":2,"title":"ES12","children":[{"leave":3,"title":"String.protype.replaceAll","children":[]},{"leave":3,"title":"WeakRef 和 FinalizationRegistry","children":[]},{"leave":3,"title":"逻辑赋值运算符","children":[]},{"leave":3,"title":"数字分隔符","children":[]}]},{"leave":2,"title":"ES13","children":[{"leave":3,"title":"Class","children":[]},{"leave":3,"title":"顶层 await","children":[]}]}]}],"body":"<h1 id=\"记录\">记录</h1>\n<h2 id=\"es6\">ES6</h2>\n<h3 id=\"intl\">Intl</h3>\n<p>对象是 ECMAScript 国际化 API 的一个命名空间，它提供了精确的字符串对比、数字格式化，和日期时间格式化。</p>\n<p>日期格式化</p>\n<pre><code class=\"language-js\"><span class=\"token comment\">// 例如我们希望出现的日期信息格式是：“xxxx年xx月xx日 xx:xx:xx”。</span>\n<span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Intl<span class=\"token punctuation\">.</span>DateTimeFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zh\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">year</span><span class=\"token operator\">:</span> <span class=\"token string\">\"numeric\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">/* \n        '2-digit'表示一定使用2位数字表示，\n        因此，如果数值不超过10，会自动在前面加0\n  */</span>\n  <span class=\"token literal-property property\">month</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2-digit\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">day</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2-digit\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">hour</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2-digit\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">minute</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2-digit\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">second</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2-digit\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 设置为false表示我们采用24小时制</span>\n  <span class=\"token literal-property property\">hour12</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">format</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// IE11浏览器下的效果 完全符合我们的预期， - 2021年05月29日 10:15:27</span>\n<span class=\"token comment\">// 但是在Chrome浏览器和Firefox浏览器下，却不是中文的年月日而是斜杠-2021/05/29 10:15:27， 还需要进一步字符处理下</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>数字格式化，</p>\n<pre><code class=\"language-js\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Intl<span class=\"token punctuation\">.</span>NumberFormat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">12345.6789</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 结果是：\"12,345.679\"</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Intl<span class=\"token punctuation\">.</span>NumberFormat</span><span class=\"token punctuation\">(</span><span class=\"token keyword nil\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">minimumIntegerDigits</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 结果是：\"08\"</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Intl<span class=\"token punctuation\">.</span>NumberFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zh\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">style</span><span class=\"token operator\">:</span> <span class=\"token string\">\"currency\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">currency</span><span class=\"token operator\">:</span> <span class=\"token string\">\"CNY\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">currencyDisplay</span><span class=\"token operator\">:</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">12345.6789</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 结果是：\"12,345.68 人民币\"</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Intl<span class=\"token punctuation\">.</span>NumberFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zh\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">style</span><span class=\"token operator\">:</span> <span class=\"token string\">\"currency\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">currency</span><span class=\"token operator\">:</span> <span class=\"token string\">\"CNY\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">12345.6789</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 结果是：\"￥12,345.68 \"</span>\n\n<span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">星期</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Intl<span class=\"token punctuation\">.</span>NumberFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zh-Hans-CN-u-nu-hanidec\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">format</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getDay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 结果是：\"星期五\"</span>\n</code></pre>\n<h3 id=\"判断是否在模块中\">判断是否在模块中</h3>\n<p>模块中顶层的 this 等于 undefined</p>\n<pre><code class=\"language-js\"><span class=\"token keyword\">const</span> isModuleScript <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span> <span class=\"token operator\">===</span> <span class=\"token keyword nil\">undefined</span>\n</code></pre>\n<h3 id=\"numberepsilon\">Number.EPSILON</h3>\n<p>Number.EPSILON 属性表示 1 与Number可表示的大于 1 的最小的浮点数之间的差值。</p>\n<p>判断数值是否相等</p>\n<pre><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isEqual</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> origin</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token known-class-name class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">abs</span><span class=\"token punctuation\">(</span>origin <span class=\"token operator\">-</span> target<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token known-class-name class-name\">Number</span><span class=\"token punctuation\">.</span><span class=\"token constant\">EPSILON</span>\n</code></pre>\n<h3 id=\"mathhypot\">Math.hypot</h3>\n<p>计算两数平方开方<code>Math.hypot(3,4) === 5</code></p>\n<h2 id=\"es7\">ES7</h2>\n<h3 id=\"求幂运算符\">求幂运算符</h3>\n<pre><code class=\"language-js\"><span class=\"token comment\">// 2的平方</span>\n<span class=\"token keyword\">let</span> squared <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">**</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// same as: 2 * 2   Math.Pow(2,2)</span>\n\n<span class=\"token comment\">// 2的三次方</span>\n<span class=\"token keyword\">let</span> cubed <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">**</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// same as: 2 * 2 * 2   Math.Pow(2,3)</span>\n</code></pre>\n<h2 id=\"es8\">ES8</h2>\n<h3 id=\"string-padding\">String padding</h3>\n<p>如果某个字符串不够指定长度，会在头部或尾部补全。padStart()用于头部补全，padEnd()用于尾部补全。</p>\n<pre><code class=\"language-js\"><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">padStart</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"0000000001\"</span>\n<span class=\"token string\">\"12\"</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">padStart</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"0000000012\"</span>\n<span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">padStart</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"0000123456\"</span>\n\n<span class=\"token comment\">// 格式提示</span>\n<span class=\"token string\">\"12\"</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">padStart</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"YYYY-MM-DD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"YYYY-MM-12\"</span>\n<span class=\"token string\">\"09-12\"</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">padStart</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"YYYY-MM-DD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"YYYY-09-12\"</span>\n</code></pre>\n<h3 id=\"objectgetownproperdescriptors\">Object.getOwnProperDescriptors</h3>\n<pre><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">shallowClone</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">object</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span>\n  <span class=\"token comment\">// 创建一个新对象</span>\n  <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">create</span><span class=\"token punctuation\">(</span>\n    <span class=\"token comment\">// 返回指定对象的原型</span>\n    <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getPrototypeOf</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 返回指定对象所有自身属性</span>\n    <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getOwnPropertyDescriptors</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 或者</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">shallowMerge</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> source</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span>\n  <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">defineProperties</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getOwnPropertyDescriptors</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3 id=\"atomics\">Atomics</h3>\n<p>Atomics 对象提供了一组静态方法对 SharedArrayBuffer 和 ArrayBuffer 对象进行原子操作。多线程之间操作数据不会引起混乱的api</p>\n<h2 id=\"es9\">es9</h2>\n<h3 id=\"u-修饰符\">u 修饰符</h3>\n<p>ES6 对正则表达式添加了u修饰符，含义为“Unicode 模式”，用来正确处理大于\\uFFFF的 Unicode 字符。也就是说，会正确处理四个字节的 UTF-16 编码。</p>\n<pre><code class=\"language-js\"><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^\\uD83D</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">u</span></span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\uD83D\\uDC2A'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">^</span>\\uD83D<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\uD83D\\uDC2A'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n\n<span class=\"token keyword\">var</span> s <span class=\"token operator\">=</span> <span class=\"token string\">'𠮷'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^.$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">^</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">$</span><span class=\"token operator\">/</span>u<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n\n<span class=\"token comment\">// 新增大括号在u模式下标识一个字符 内放置16进制数</span>\n<span class=\"token operator\">/</span>\\u<span class=\"token punctuation\">{</span><span class=\"token number\">61</span><span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span>\n<span class=\"token operator\">/</span>\\u<span class=\"token punctuation\">{</span><span class=\"token number\">61</span><span class=\"token punctuation\">}</span><span class=\"token operator\">/</span>u<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n<span class=\"token operator\">/</span>\\u<span class=\"token punctuation\">{</span>20BB7<span class=\"token punctuation\">}</span><span class=\"token operator\">/</span>u<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'𠮷'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n\n<span class=\"token operator\">/</span>a<span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'aa'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n<span class=\"token operator\">/</span>a<span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token operator\">/</span>u<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'aa'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n<span class=\"token operator\">/</span>𠮷<span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'𠮷𠮷'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span>\n<span class=\"token operator\">/</span>𠮷<span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token operator\">/</span>u<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'𠮷𠮷'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n\n<span class=\"token operator\">/</span><span class=\"token operator\">^</span>\\<span class=\"token constant\">S</span>$<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'𠮷'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">^</span>\\<span class=\"token constant\">S</span>$<span class=\"token operator\">/</span>u<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'𠮷'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">codePointLength</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">text</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> text<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[\\s\\S]</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">gu</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">return</span> result <span class=\"token operator\">?</span> result<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> s <span class=\"token operator\">=</span> <span class=\"token string\">'𠮷𠮷'</span><span class=\"token punctuation\">;</span>\n\ns<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token comment\">// 4</span>\n<span class=\"token function\">codePointLength</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2</span>\n</code></pre>\n<h3 id=\"y修饰符\">y修饰符</h3>\n<p>除了u修饰符，ES6 还为正则表达式添加了y修饰符，叫做“粘连”（sticky）修饰符。</p>\n<pre><code class=\"language-js\"><span class=\"token keyword\">var</span> s <span class=\"token operator\">=</span> <span class=\"token string\">'aaa_aa_a'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> r1 <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">a+</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> r2 <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">a+</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">y</span></span><span class=\"token punctuation\">;</span>\n\nr1<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">exec</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"aaa\"]</span>\nr2<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">exec</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"aaa\"]</span>\n\nr1<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">exec</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"aa\"]</span>\nr2<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">exec</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token comment\">// null</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">REGEX</span> <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">a</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">y</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 指定从2号位置开始匹配</span>\n<span class=\"token constant\">REGEX</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">lastIndex</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 不是粘连，匹配失败</span>\n<span class=\"token constant\">REGEX</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">'xaya'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// null</span>\n\n<span class=\"token comment\">// 指定从3号位置开始匹配</span>\n<span class=\"token constant\">REGEX</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">lastIndex</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 3号位置是粘连，匹配成功</span>\n<span class=\"token keyword\">const</span> match <span class=\"token operator\">=</span> <span class=\"token constant\">REGEX</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">'xaya'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmatch<span class=\"token punctuation\">.</span><span class=\"token property-access\">index</span> <span class=\"token comment\">// 3</span>\n<span class=\"token constant\">REGEX</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">lastIndex</span> <span class=\"token comment\">// 4</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">TOKEN_Y</span> <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\s*(\\+|[0-9]+)\\s*</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">y</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">TOKEN_G</span>  <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\s*(\\+|[0-9]+)\\s*</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">tokenize</span><span class=\"token punctuation\">(</span><span class=\"token constant\">TOKEN_Y</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'3 + 4'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// [ '3', '+', '4' ]</span>\n<span class=\"token function\">tokenize</span><span class=\"token punctuation\">(</span><span class=\"token constant\">TOKEN_G</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'3 + 4'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// [ '3', '+', '4' ]</span>\n\n<span class=\"token function\">tokenize</span><span class=\"token punctuation\">(</span><span class=\"token constant\">TOKEN_Y</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'3x + 4'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// [ '3' ]</span>\n<span class=\"token function\">tokenize</span><span class=\"token punctuation\">(</span><span class=\"token constant\">TOKEN_G</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'3x + 4'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// [ '3', '+', '4' ]</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">tokenize</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token constant\">TOKEN_REGEX</span><span class=\"token punctuation\">,</span> str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> match<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">while</span> <span class=\"token punctuation\">(</span>match <span class=\"token operator\">=</span> <span class=\"token constant\">TOKEN_REGEX</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">exec</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    result<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span>match<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword control-flow\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3 id=\"s-修饰符：dotall-模式\">s 修饰符：dotAll 模式</h3>\n<p>正则表达式中，点（.）是一个特殊字符，代表任意的单个字符，但是有两个例外。一个是四个字节的 UTF-16 字符，这个可以用u修饰符解决；另一个是行终止符</p>\n<pre><code class=\"language-js\"><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">foo.bar</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo\\nbar'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// false</span>\n\n<span class=\"token comment\">// es5</span>\n<span class=\"token operator\">/</span>foo<span class=\"token punctuation\">[</span><span class=\"token operator\">^</span><span class=\"token punctuation\">]</span>bar<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo\\nbar'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// true</span>\n\n<span class=\"token comment\">// ES2018 引入s修饰符，使得.可以匹配任意单个字符。</span>\n<span class=\"token operator\">/</span>foo<span class=\"token punctuation\">.</span><span class=\"token property-access\">bar</span><span class=\"token operator\">/</span>s<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo\\nbar'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n</code></pre>\n<h3 id=\"后行断言\">后行断言</h3>\n<pre><code class=\"language-js\"><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">(?&lt;=\\$)\\d+</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Benjamin Franklin is on the $100 bill'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// [\"100\"]</span>\n<span class=\"token operator\">/</span><span class=\"token punctuation\">(</span><span class=\"token operator\">?</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span>\\$<span class=\"token punctuation\">)</span>\\d<span class=\"token operator\">+</span><span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">'it’s is worth about €90'</span><span class=\"token punctuation\">)</span>                <span class=\"token comment\">// [\"90\"]</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">RE_DOLLAR_PREFIX</span> <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">(?&lt;=\\$)foo</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token string\">'$foo %foo foo'</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">replace</span><span class=\"token punctuation\">(</span><span class=\"token constant\">RE_DOLLAR_PREFIX</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">(?&lt;=(\\d+)(\\d+))$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1053'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"\", \"1\", \"053\"]</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">^</span><span class=\"token punctuation\">(</span>\\d<span class=\"token operator\">+</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>\\d<span class=\"token operator\">+</span><span class=\"token punctuation\">)</span>$<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1053'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"1053\", \"105\", \"3\"]</span>\n\n<span class=\"token comment\">// 后行断言引用必须在之前</span>\n<span class=\"token operator\">/</span><span class=\"token punctuation\">(</span><span class=\"token operator\">?</span><span class=\"token operator\">&lt;=</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>d\\<span class=\"token number\">1</span><span class=\"token punctuation\">)</span>r<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hodor'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// null</span>\n<span class=\"token operator\">/</span><span class=\"token punctuation\">(</span><span class=\"token operator\">?</span><span class=\"token operator\">&lt;=</span>\\<span class=\"token number\">1</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>r<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hodor'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// [\"r\", \"o\"]</span>\n</code></pre>\n<h3 id=\"具名组匹配\">具名组匹配</h3>\n<pre><code class=\"language-js\"><span class=\"token comment\">// es5</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">RE_DATE</span> <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">(\\d{4})-(\\d{2})-(\\d{2})</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> matchObj <span class=\"token operator\">=</span> <span class=\"token constant\">RE_DATE</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1999-12-31'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> year <span class=\"token operator\">=</span> matchObj<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1999</span>\n<span class=\"token keyword\">const</span> month <span class=\"token operator\">=</span> matchObj<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 12</span>\n<span class=\"token keyword\">const</span> day <span class=\"token operator\">=</span> matchObj<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 31</span>\n\n<span class=\"token comment\">// es6</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">RE_DATE</span> <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">(?&lt;year>\\d{4})-(?&lt;month>\\d{2})-(?&lt;day>\\d{2})</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> matchObj <span class=\"token operator\">=</span> <span class=\"token constant\">RE_DATE</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1999-12-31'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> year <span class=\"token operator\">=</span> matchObj<span class=\"token punctuation\">.</span><span class=\"token property-access\">groups</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">year</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"1999\"</span>\n<span class=\"token keyword\">const</span> month <span class=\"token operator\">=</span> matchObj<span class=\"token punctuation\">.</span><span class=\"token property-access\">groups</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">month</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"12\"</span>\n<span class=\"token keyword\">const</span> day <span class=\"token operator\">=</span> matchObj<span class=\"token punctuation\">.</span><span class=\"token property-access\">groups</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">day</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"31\"</span>\n\n\n<span class=\"token keyword\">let</span> re <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">(?&lt;year>\\d{4})-(?&lt;month>\\d{2})-(?&lt;day>\\d{2})</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">u</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token string\">'2015-01-02'</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">replace</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">,</span> <span class=\"token string\">'$&lt;day>/$&lt;month>/$&lt;year>'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// '02/01/2015'</span>\n\n\n<span class=\"token string\">'2015-01-02'</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">replace</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>\n   matched<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 整个匹配结果 2015-01-02</span>\n   capture1<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 第一个组匹配 2015</span>\n   capture2<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 第二个组匹配 01</span>\n   capture3<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 第三个组匹配 02</span>\n   position<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 匹配开始的位置 0</span>\n   <span class=\"token constant\">S</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 原字符串 2015-01-02</span>\n   groups <span class=\"token comment\">// 具名组构成的一个对象 {year, month, day}</span>\n <span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span>day<span class=\"token punctuation\">,</span> month<span class=\"token punctuation\">,</span> year<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> groups<span class=\"token punctuation\">;</span>\n <span class=\"token keyword control-flow\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>day<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>month<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>year<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 引用 </span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">RE_TWICE</span> <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^(?&lt;word>[a-z]+)!\\k&lt;word>$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token constant\">RE_TWICE</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abc!abc'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n<span class=\"token constant\">RE_TWICE</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abc!ab'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">RE_TWICE</span> <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^(?&lt;word>[a-z]+)!\\1$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token constant\">RE_TWICE</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abc!abc'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n<span class=\"token constant\">RE_TWICE</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abc!ab'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">RE_TWICE</span> <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^(?&lt;word>[a-z]+)!\\k&lt;word>!\\1$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token constant\">RE_TWICE</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abc!abc!abc'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n<span class=\"token constant\">RE_TWICE</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abc!abc!ab'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span>\n</code></pre>\n<h3 id=\"正则匹配索引\">正则匹配索引</h3>\n<pre><code class=\"language-js\"><span class=\"token keyword\">const</span> text <span class=\"token operator\">=</span> <span class=\"token string\">'zabbcdef'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> re <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">ab</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">exec</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nresult<span class=\"token punctuation\">.</span><span class=\"token property-access\">index</span> <span class=\"token comment\">// 1</span>\nresult<span class=\"token punctuation\">.</span><span class=\"token property-access\">indices</span> <span class=\"token comment\">// [ [1, 3] ]</span>\n\n<span class=\"token keyword\">const</span> text <span class=\"token operator\">=</span> <span class=\"token string\">'zabbcdef'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> re <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">ab+(cd)</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">exec</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nresult<span class=\"token punctuation\">.</span><span class=\"token property-access\">indices</span> <span class=\"token comment\">// [ [ 1, 6 ], [ 4, 6 ] ]</span>\n\n<span class=\"token keyword\">const</span> text <span class=\"token operator\">=</span> <span class=\"token string\">'zabbcdef'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> re <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">ab+(cd(ef))</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">exec</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nresult<span class=\"token punctuation\">.</span><span class=\"token property-access\">indices</span> <span class=\"token comment\">// [ [1, 8], [4, 8], [6, 8] ]</span>\n\n<span class=\"token keyword\">const</span> text <span class=\"token operator\">=</span> <span class=\"token string\">'zabbcdef'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> re <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">ab+(?&lt;Z>cd)</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">exec</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nresult<span class=\"token punctuation\">.</span><span class=\"token property-access\">indices</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">groups</span> <span class=\"token comment\">// { Z: [ 4, 6 ] }</span>\n</code></pre>\n<h3 id=\"用-forawaitof-的语法来操作\">用 for...await...of 的语法来操作</h3>\n<pre><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">TimeOut</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\">time</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token function\"><span class=\"token maybe-class-name\">TimeOut</span></span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\"><span class=\"token maybe-class-name\">TimeOut</span></span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\"><span class=\"token maybe-class-name\">TimeOut</span></span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword control-flow\">for</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> item <span class=\"token keyword\">of</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token known-class-name class-name\">Date</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 1560092345730 2000</span>\n<span class=\"token comment\">// 1560092345730 1000</span>\n<span class=\"token comment\">// 1560092346336 3000</span>\n</code></pre>\n<h2 id=\"es10\">ES10</h2>\n<h3 id=\"flat-flatmap\">flat flatMap</h3>\n<pre><code class=\"language-js\"><span class=\"token keyword\">const</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">flat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// expected output: [0, 1, 2, 3, 4]</span>\n\n<span class=\"token keyword\">const</span> arr2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>arr2<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">flat</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// expected output: [0, 1, 2, [3, 4]]</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">flatMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>x <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [[2], [4], [6], [8]]</span>\n</code></pre>\n<h3 id=\"objectfromentries\">Object.fromEntries</h3>\n<pre><code class=\"language-js\"><span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">fromEntries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">'baz'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">41</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// { foo: bar, baz: 41 }</span>\n\n<span class=\"token keyword\">const</span> entries <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">'baz'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">41</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">fromEntries</span><span class=\"token punctuation\">(</span>entries<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// { foo: bar, baz: 41 }</span>\n\n<span class=\"token keyword\">const</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">fromEntries</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// { foo: true, bar: false }</span>\n\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">fromEntries</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// { 0: \"a\", 1: \"b\", 2: \"c\" }</span>\n\n\n<span class=\"token keyword\">let</span> query <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">fromEntries</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo=bar&amp;baz=qux\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// {foo: \"bar\", baz: \"qux\"}</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">40</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">36</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">fromEntries</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> age <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// {Alice: 40, Bob: 36}</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3 id=\"symboldescription\">Symbol#description</h3>\n<pre><code class=\"language-js\"><span class=\"token keyword\">const</span> sym <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span>\n<span class=\"token known-class-name class-name\">String</span><span class=\"token punctuation\">(</span>sym<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"Symbol(foo)\"</span>\nsym<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"Symbol(foo)\"</span>\nsym<span class=\"token punctuation\">.</span><span class=\"token property-access\">description</span> <span class=\"token comment\">// foo</span>\n</code></pre>\n<h2 id=\"es11\">ES11</h2>\n<h3 id=\"stringprototypematchall\">String.prototype.matchAll</h3>\n<p><code>String.prototype.matchAll</code>返回一个正则表达式在当前字符串的所有匹配</p>\n<pre><code class=\"language-js\"><span class=\"token keyword\">const</span> string <span class=\"token operator\">=</span> <span class=\"token string\">\"test1test2test3\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">t(e)(st(\\d?))</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> newdata <span class=\"token operator\">=</span> string<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">matchAll</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> match <span class=\"token keyword\">of</span> newdata<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>match<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// [\"test1\", \"e\", \"st1\", \"1\", index: 0, input: \"test1test2test3\"]</span>\n<span class=\"token comment\">// [\"test2\", \"e\", \"st2\", \"2\", index: 5, input: \"test1test2test3\"]</span>\n<span class=\"token comment\">// [\"test3\", \"e\", \"st3\", \"3\", index: 10, input: \"test1test2test3\"]</span>\n\n<span class=\"token comment\">// 转为数组的方法一</span>\n<span class=\"token punctuation\">[</span><span class=\"token spread operator\">...</span>newdata<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 转为数组的方法二</span>\n<span class=\"token known-class-name class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token keyword module\">from</span><span class=\"token punctuation\">(</span>newdata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3 id=\"promise\">Promise</h3>\n<p><code>Promise</code>静态方法</p>\n<ul>\n<li><code>Promise.race</code> 只要任意一个 promise 的状态改变(不管成功 or 失败)，那么就返回那个 promise</li>\n<li><code>Promise.allSettled</code> 只有等到所有实例都返回结果，不管是fulfilled还是rejected，实例才会结束</li>\n<li><code>Promise.any</code> 只要其中任意一个 promise 成功，就返回那个已经成功的 promise。</li>\n</ul>\n<p><code>Promise</code>实例属性<code>status</code>可以反应成功与否成功为<code>fulfilled</code>，失败为<code>rejected</code>，实例中有<code>finally</code>无论成功与否</p>\n<pre><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> promises <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./index.html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://does-not-exist/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> results <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token known-class-name class-name\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">allSettled</span><span class=\"token punctuation\">(</span>promises<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 过滤出成功的请求</span>\n  <span class=\"token keyword\">const</span> successfulPromises <span class=\"token operator\">=</span> results\n    <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> p<span class=\"token punctuation\">.</span><span class=\"token property-access\">status</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"fulfilled\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> p<span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 过滤出失败的请求，并输出原因</span>\n  <span class=\"token keyword\">const</span> errors <span class=\"token operator\">=</span> results\n    <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> p<span class=\"token punctuation\">.</span><span class=\"token property-access\">status</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"rejected\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> p<span class=\"token punctuation\">.</span><span class=\"token property-access\">reason</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>errors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token known-class-name class-name\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">allSettled</span><span class=\"token punctuation\">(</span>requests<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword control-flow\">finally</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"所有请求已结束，并且我不关心是成功还是失败\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 关闭loading状态</span>\n  <span class=\"token function\">removeLoadingIndicator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3 id=\"globalthis\">globalThis</h3>\n<p>globalThis 提供了一个标准的方式来获取不同环境下的全局 this 对象（也就是全局对象自身）</p>\n<pre><code class=\"language-js\"><span class=\"token comment\">// 以前：</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">getGlobal</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> self <span class=\"token operator\">!==</span> <span class=\"token string\">'undefined'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword control-flow\">return</span> self<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token dom variable\">window</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'undefined'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword control-flow\">return</span> <span class=\"token dom variable\">window</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> global <span class=\"token operator\">!==</span> <span class=\"token string\">'undefined'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword control-flow\">return</span> global<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword control-flow\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'unable to locate global object'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> globals <span class=\"token operator\">=</span> <span class=\"token function\">getGlobal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 现在</span>\nglobalThis\n</code></pre>\n<h3 id=\"空位合并操作符\">空位合并操作符(??)</h3>\n<p>空值合并操作符(??)只有当左侧为<code>null|undefined</code>事会返回右侧的值</p>\n<pre><code class=\"language-js\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token keyword null nil\">null</span> <span class=\"token operator\">??</span> <span class=\"token number\">1</span>           <span class=\"token comment\">// 1</span>\n<span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token keyword nil\">undefined</span> <span class=\"token operator\">??</span> <span class=\"token number\">1</span>      <span class=\"token comment\">// 1</span>\n<span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token string\">''</span> <span class=\"token operator\">??</span> <span class=\"token number\">1</span>             <span class=\"token comment\">// ''</span>\n<span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">NaN</span> <span class=\"token operator\">??</span> <span class=\"token number\">1</span>            <span class=\"token comment\">// NaN</span>\n<span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token operator\">??</span> <span class=\"token number\">1</span>              <span class=\"token comment\">// 0</span>\n</code></pre>\n<h3 id=\"可选链式操作符（）\">可选链式操作符（?.）</h3>\n<p>?. 也叫链判断运算符。它允许开发人员读取深度嵌套在对象链中的属性值，而不必验证每个引用。当引用为空时，表达式停止计算并返回 undefined。</p>\n<pre><code class=\"language-js\"><span class=\"token keyword\">var</span> travelPlans <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">destination</span><span class=\"token operator\">:</span> <span class=\"token string\">\"DC\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">monday</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">location</span><span class=\"token operator\">:</span> <span class=\"token string\">\"National Mall\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">budget</span><span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// new</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>travelPlans<span class=\"token punctuation\">.</span><span class=\"token property-access\">tuesday</span><span class=\"token operator\">?.</span><span class=\"token dom variable\">location</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => undefined</span>\n\n<span class=\"token comment\">// 可选链不能用于赋值</span>\n<span class=\"token keyword\">let</span> object <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nobject<span class=\"token operator\">?.</span>property <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Uncaught SyntaxError: Invalid left-hand side in assignment</span>\n\n<span class=\"token comment\">// old</span>\n<span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> travelPlans<span class=\"token punctuation\">.</span><span class=\"token property-access\">tuesday</span> <span class=\"token operator\">&amp;&amp;</span> travelPlans<span class=\"token punctuation\">.</span><span class=\"token property-access\">tuesday</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">location</span>\n</code></pre>\n<h3 id=\"bigint\">bigInt</h3>\n<p>旧版本的 JS 标准最大的整数只能是 2^53-- 即Number.MAX_SAFE_INTEGER或Math.pow(2, 53)</p>\n<p>如果无法准确计算大于2^53的数字的</p>\n<p>现在使用BigInt 用来表示整数，没有位数的限制，任何位数的整数都可以精确表示。</p>\n<pre><code class=\"language-js\"><span class=\"token keyword\">const</span> theBiggestInt <span class=\"token operator\">=</span> <span class=\"token number\">9007199254740991n</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> alsoHuge <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">BigInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">9007199254740991</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2 id=\"es12\">ES12</h2>\n<h3 id=\"stringprotypereplaceall\">String.protype.replaceAll</h3>\n<pre><code class=\"language-js\"><span class=\"token comment\">// old</span>\n<span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"a+b+c+\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> newStr <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\+</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"🤣\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>newStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//a🤣b🤣c🤣</span>\n\n<span class=\"token comment\">// 获取使用 split，join进行字符串分割</span>\n<span class=\"token keyword\">const</span> queryString <span class=\"token operator\">=</span> <span class=\"token string\">\"q=query+string+parameters\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> withSpaces <span class=\"token operator\">=</span> queryString<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"+\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// new</span>\n<span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"a+b+c+\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> newStr <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">replaceAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"+\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"🤣\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>newStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//a🤣b🤣c🤣</span>\n\n<span class=\"token keyword\">const</span> queryString <span class=\"token operator\">=</span> <span class=\"token string\">\"q=query+string+parameters\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> withSpaces <span class=\"token operator\">=</span> queryString<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">replaceAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"+\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3 id=\"weakref-和-finalizationregistry\">WeakRef 和 FinalizationRegistry</h3>\n<p>WeakRef 提案主要包含两个新功能：</p>\n<p>可以通过 WeakRef 类来给某个对象创建一个弱引用<br>可以通过 FinalizationRegistry 类，在某个对象被垃圾回收之后，执行一些自定义方法</p>\n<p>WeakRef 主要用来缓存和映射一些大型对象，当你希望某个对象在不被其它地方引用的情况下及时地被垃圾回收，那么你就可以使用它。</p>\n<pre><code class=\"language-js\"><span class=\"token keyword\">const</span> cache <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> finalizationGroup <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FinalizationGroup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">iterator</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> name <span class=\"token keyword\">of</span> iterator<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> ref <span class=\"token operator\">=</span> cache<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// WeakRef 通过 deref方法返回引用对象， 如果被收回则为空</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>ref <span class=\"token operator\">!==</span> <span class=\"token keyword nil\">undefined</span> <span class=\"token operator\">&amp;&amp;</span> ref<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">deref</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token keyword nil\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      cache<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">delete</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getImageCached</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> ref <span class=\"token operator\">=</span> cache<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>ref <span class=\"token operator\">!==</span> <span class=\"token keyword nil\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 2</span>\n    <span class=\"token comment\">// 查看弱引用是否有对象</span>\n    <span class=\"token keyword\">const</span> deref <span class=\"token operator\">=</span> ref<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">deref</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>deref <span class=\"token operator\">!==</span> <span class=\"token keyword nil\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token keyword control-flow\">return</span> deref<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">const</span> image <span class=\"token operator\">=</span> <span class=\"token function\">performExpensiveOperation</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n\n  <span class=\"token comment\">// 创建weakRef</span>\n  <span class=\"token keyword\">const</span> wr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WeakRef</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4</span>\n  cache<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">set</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> wr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5</span>\n  <span class=\"token comment\">// image 注册垃圾回收 传入回调参数</span>\n  finalizationGroup<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">register</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 6</span>\n  <span class=\"token keyword control-flow\">return</span> image<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 7</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3 id=\"逻辑赋值运算符\">逻辑赋值运算符</h3>\n<pre><code class=\"language-js\"><span class=\"token comment\">// better 👶</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">example</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">opts</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Setters are not needlessly called.</span>\n  opts<span class=\"token punctuation\">.</span><span class=\"token property-access\">foo</span> <span class=\"token operator\">??=</span> <span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// No repetition of `opts.baz`.</span>\n  opts<span class=\"token punctuation\">.</span><span class=\"token property-access\">baz</span> <span class=\"token operator\">??=</span> <span class=\"token string\">\"qux\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 默认参数值</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">example</span><span class=\"token punctuation\">(</span>opts <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">foo</span><span class=\"token operator\">:</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">baz</span><span class=\"token operator\">:</span> <span class=\"token string\">\"baz\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> opts<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">giveKey</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token string\">\"somekey\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> userDetails <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"chika\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">room</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">key</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// userDetails.key = userDetails.key || giveKey();</span>\nuserDetails<span class=\"token punctuation\">.</span><span class=\"token property-access\">key</span> <span class=\"token operator\">||=</span> <span class=\"token function\">giveKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>userDetails<span class=\"token punctuation\">.</span><span class=\"token property-access\">key</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//output : somekey</span>\n\n\n\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">deleteKey</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> userDetails <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"chika\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">room</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">key</span><span class=\"token operator\">:</span> <span class=\"token string\">\"990000\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// userDetails.key = userDetails.key &amp;&amp; deleteKey();</span>\nuserDetails<span class=\"token punctuation\">.</span><span class=\"token property-access\">key</span> <span class=\"token operator\">&amp;&amp;=</span> <span class=\"token function\">deleteKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>userDetails<span class=\"token punctuation\">.</span><span class=\"token property-access\">key</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//output : \"\"</span>\n\n\n\n<span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> y <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// x = x ?? y;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">??=</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => 5</span>\n\n\n\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">gameSettingsWithNullish</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">options</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  options<span class=\"token punctuation\">.</span><span class=\"token property-access\">gameSpeed</span> <span class=\"token operator\">??=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  options<span class=\"token punctuation\">.</span><span class=\"token property-access\">gameDiff</span> <span class=\"token operator\">??=</span> <span class=\"token string\">\"easy\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">return</span> options<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">gameSettingsWithDefaultParams</span><span class=\"token punctuation\">(</span>gameSpeed <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> gameDiff <span class=\"token operator\">=</span> <span class=\"token string\">\"easy\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span> gameSpeed<span class=\"token punctuation\">,</span> gameDiff <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">gameSettingsWithNullish</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">gameSpeed</span><span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">gameDiff</span><span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => {gameSpeed: 1, gameDiff: 'easy'}</span>\n<span class=\"token function\">gameSettingsWithDefaultParams</span><span class=\"token punctuation\">(</span><span class=\"token keyword nil\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => {gameSpeed: 1, gameDiff: null}</span>\n\n\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getKey</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token string\">\"somekey\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> userDetails <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"chika\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">room</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nuserDetails<span class=\"token punctuation\">.</span><span class=\"token property-access\">key</span> <span class=\"token operator\">??=</span> <span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>userDetails<span class=\"token punctuation\">.</span><span class=\"token property-access\">key</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//output : \"somekey\"</span>\n</code></pre>\n<h3 id=\"数字分隔符\">数字分隔符</h3>\n<p>此功能使开发人员可以通过在数字组之间创建视觉分隔来使其数字文字更具可读性。</p>\n<pre><code class=\"language-js\"><span class=\"token number\">1_000_000_000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 十亿</span>\n<span class=\"token number\">101_475_938.38</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 亿万</span>\n\n<span class=\"token keyword\">const</span> amount <span class=\"token operator\">=</span> <span class=\"token number\">12345_00</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1234500</span>\n<span class=\"token keyword\">const</span> amount <span class=\"token operator\">=</span> <span class=\"token number\">123_4500</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1234500</span>\n<span class=\"token keyword\">const</span> amount <span class=\"token operator\">=</span> <span class=\"token number\">1_234_500</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1,234,500</span>\n\n<span class=\"token number\">0.000_001</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 百万分之一</span>\n<span class=\"token number\">1e10_000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 10^10000</span>\n\n<span class=\"token comment\">//</span>\n<span class=\"token keyword\">const</span> binary_literals <span class=\"token operator\">=</span> <span class=\"token number\">0b1010_0001_1000_0101</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> hex_literals <span class=\"token operator\">=</span> <span class=\"token number\">0xa0_b0_c0</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//</span>\n<span class=\"token keyword\">const</span> bigInt_literals <span class=\"token operator\">=</span> <span class=\"token number\">1_000_000_000_000n</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//</span>\n<span class=\"token keyword\">const</span> octal_literal <span class=\"token operator\">=</span> <span class=\"token number\">0o1234_5670</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2 id=\"es13\">ES13</h2>\n<h3 id=\"class\">Class</h3>\n<pre><code class=\"language-js\"><span class=\"token comment\">// 可以使用声明式的类字段</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Pokemon</span> <span class=\"token punctuation\">{</span>\n  name <span class=\"token operator\">=</span> <span class=\"token string\">\"Pikachu\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">attack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">static</span> <span class=\"token function\">starter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 私有属性/私有方法 我们将使用# 符号表示类的私有变量</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">{</span>\n  #name <span class=\"token operator\">=</span> <span class=\"token string\">\"something\"</span><span class=\"token punctuation\">;</span>\n\n  #name2 <span class=\"token operator\">=</span> <span class=\"token string\">\"name2\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 实例私有方法-只能在此Class内部使用</span>\n  <span class=\"token function\">#instancePrivateMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"实例私有方法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// static字段</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 静态私有字段声明-只能在此Class内部使用</span>\n  <span class=\"token keyword\">static</span> #staticFieldPrivateName <span class=\"token operator\">=</span> <span class=\"token string\">\"静态私有字段声明:真名-王撕葱\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 静态公有字段声明</span>\n  <span class=\"token keyword\">static</span> staticFieldPublicName <span class=\"token operator\">=</span> <span class=\"token string\">\"静态公有字段声明:名-撕葱\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 静态公有方法-ES6已支持</span>\n  <span class=\"token keyword\">static</span> <span class=\"token function\">staticPublicMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"静态公有方法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 静态私有方法-只能在此Class内部使用</span>\n  <span class=\"token keyword\">static</span> <span class=\"token function\">#staticPrivateMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#staticPrivateMethod:\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"静态私有方法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 私有属性也可以设置 getter 和 setter 方法</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">{</span>\n  #name <span class=\"token operator\">=</span> <span class=\"token string\">\"something\"</span><span class=\"token punctuation\">;</span>\n\n  #name2 <span class=\"token operator\">=</span> <span class=\"token string\">\"name2\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 只能在此Class内部使用</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">#privateGet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">#name</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// 只能在此Class内部使用</span>\n  <span class=\"token keyword\">set</span> <span class=\"token function\">#privateSet</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">#name</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">get</span> <span class=\"token function\">publicGet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">#name2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">set</span> <span class=\"token function\">publicSet</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">#name2</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 静态公有/私有字段</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ColorFinder</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> #red <span class=\"token operator\">=</span> <span class=\"token string\">\"#ff0000\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">static</span> #green <span class=\"token operator\">=</span> <span class=\"token string\">\"#00ff00\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">static</span> #blue <span class=\"token operator\">=</span> <span class=\"token string\">\"#0000ff\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">static</span> <span class=\"token function\">colorName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">switch</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">\"red\"</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword control-flow\">return</span> <span class=\"token maybe-class-name\">ColorFinder</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">#red</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">\"blue\"</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword control-flow\">return</span> <span class=\"token maybe-class-name\">ColorFinder</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">#blue</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">\"green\"</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword control-flow\">return</span> <span class=\"token maybe-class-name\">ColorFinder</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">#green</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword module\">default</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword control-flow\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RangeError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unknown color\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Somehow use colorName</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3 id=\"顶层-await\">顶层 await</h3>\n<pre><code class=\"language-js\"><span class=\"token comment\">// awaiting.mjs</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> process <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"./some-module.mjs\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> dynamic <span class=\"token operator\">=</span> <span class=\"token keyword module\">import</span><span class=\"token punctuation\">(</span>computedModuleSpecifier<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> output <span class=\"token operator\">=</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword control-flow\">await</span> dynamic<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword module\">default</span><span class=\"token punctuation\">,</span> <span class=\"token keyword control-flow\">await</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// usage.mjs</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> output <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"./awaiting.mjs\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">outputPlusValue</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword control-flow\">return</span> output <span class=\"token operator\">+</span> value <span class=\"token punctuation\">}</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">outputPlusValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">outputPlusValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n","desc":"记录\nES6\nIntl\n对象是 ECMAScript 国际化 API 的一个命名空间，它提供了精确的字符串对比、数字格式化，和日期时间格式化。\n日期格式化\n// 例如我们希望出现的日期信息格式是：“xxxx年xx月xx日 xx:xx:xx”。\nconst res = new Intl.DateTim","column":{"title":"javascript笔录","id":"8c7c4031e54f97dba0b7"}}