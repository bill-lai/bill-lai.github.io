{"title":"iframe,ajax,canvas跨域处理","id":"2b99b3a4b5641cca38d3","mtime":1648799320144,"ctime":1648799219186,"issues":{"number":32,"commentsUrl":"https://api.github.com/repos/bill-lai/bill-lai.github.io/issues/32/comments","reactionsUrl":"https://api.github.com/repos/bill-lai/bill-lai.github.io/issues/32/reactions"},"head":null,"foot":null,"dirs":[{"leave":2,"title":"iframe 跨域","children":[{"leave":3,"title":"子域跨域 document.domain","children":[]},{"leave":3,"title":"window.name","children":[]},{"leave":3,"title":"window.postMessage","children":[]}]},{"leave":2,"title":"AJAX 跨域","children":[{"leave":3,"title":"JSONP","children":[]},{"leave":3,"title":"CORS","children":[]},{"leave":3,"title":"携带凭证的 CORS","children":[]},{"leave":3,"title":"Proxy","children":[]}]},{"leave":2,"title":"canvas 跨域","children":[{"leave":3,"title":"CORS、Proxy","children":[]},{"leave":3,"title":"携带凭证的CORS","children":[]}]}],"body":"<p>因为浏览器的同源策略而产生跨域问题，跨域主要是为了用户的上网安全。下面例举了前端最常见的三个跨域，以及处理方式</p>\n<h2 id=\"iframe-跨域\">iframe 跨域</h2>\n<p><code>iframe</code>跨域主要是为了防止恶意网站获取其他网站的<code>dom</code>，拿去私密信息，如果没有跨域恶意网站可以嵌套其他网站，比如<code>https://mail.qq.com/</code>，当用户输入用户名密码时通过<code>dom</code>即可截取到。当然也有一些业务确实确实需要跟子页面通讯，下面列举了一系列<code>iframe</code>跨域的处理方式</p>\n<h3 id=\"子域跨域-documentdomain\">子域跨域 document.domain</h3>\n<p><code>document.domain</code>的作用就是<code>获取/设置</code>当前文档的原始域名，默认值就是当前域名。可设置的值为<code>父域名|当前域名</code>。比如<code>a.demo.com</code>可设置的值就是<code>a.demo.com|demo.com</code>。浏览器判断跨域时会使用<code>document.domain</code>来判断是否域名跨域。</p>\n<p>所以我们子域名与子域名使用<code>iframe</code>跨域时，双方的<code>document.domain</code>都设置为父域名。父域名与子域名使用<code>iframe</code>跨域时，子域名将<code>document.domain</code>设置为父级域名。</p>\n<h3 id=\"windowname\">window.name</h3>\n<p><code>window.name</code>可读可写，值是跟着浏览器窗体走的，也就是说不是跟着页面走的，我们在使用<code>iframe</code>加载子页面时，子页面可以通过<code>name</code>来传递值给父级使用。</p>\n<pre><code class=\"language-js\"><span class=\"token comment\">// 子页面</span>\n<span class=\"token dom variable\">window</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span> <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">\"child\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<pre><code class=\"language-js\"><span class=\"token comment\">// 父页面</span>\n<span class=\"token keyword\">const</span> $iframe <span class=\"token operator\">=</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"iframe\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n$iframe<span class=\"token punctuation\">.</span><span class=\"token property-access\">src</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n$iframe<span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">onload</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// '{\"title\":\"child\"}'</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>$iframe<span class=\"token punctuation\">.</span><span class=\"token property-access\">contentWindow</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">body</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">appendChild</span><span class=\"token punctuation\">(</span>$iframe<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3 id=\"windowpostmessage\">window.postMessage</h3>\n<p><code>window.postMessage</code>方法可以安全的实现跨通讯，使用时在发送方明确接收方的协议、地址、端口号就可以发送，接收方使用<code>message</code>事件监听来自<code>postMessage</code>的事件。</p>\n<pre><code class=\"language-js\"><span class=\"token comment\">// 子页面 b</span>\nparent<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"toggleFullScreen\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"http://a.demo.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<pre><code class=\"language-js\"><span class=\"token comment\">// 父页面 a</span>\n<span class=\"token dom variable\">window</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"message\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span><span class=\"token property-access\">origin</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"http://b.demo.com\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// event.data 发送的消息</span>\n    <span class=\"token dom variable\">window</span><span class=\"token punctuation\">[</span>event<span class=\"token punctuation\">.</span><span class=\"token property-access\">data</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// event.source 获取发送方的window</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token property-access\">source</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>event<span class=\"token punctuation\">.</span><span class=\"token property-access\">data</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">Success</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">.</span><span class=\"token property-access\">origin</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2 id=\"ajax-跨域\">AJAX 跨域</h2>\n<p><code>AJAX</code>跨域主要是放置恶意网站请求其他网站，因为请求中会携带<code>cookie</code>服务器会误认为是“本人”操作而引发安全问题。比如用户登录了银行网站，然后访问恶意网站，恶意网站请求转账到指定账户，此时请求会携带上用户信息到银行服务器。当然也有一些业务确实跨域请求其他服务器，下面列举了一系列<code>AJAX</code>跨域的处理方式</p>\n<h3 id=\"jsonp\">JSONP</h3>\n<p><code>ajax</code>请求收到同源策略影响，但是<code>script</code>标签的<code>src</code>属性不会，可以访问跨域的<code>js</code>脚本。我们可以利用这个特性，在服务端不返回<code>JSON</code>格式，而是返回某个函数执行代码。</p>\n<pre><code class=\"language-js\"><span class=\"token keyword\">const</span> $script <span class=\"token operator\">=</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"script\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n$script<span class=\"token punctuation\">.</span><span class=\"token property-access\">src</span> <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">http://www.xxx.com/?callback=getData</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getData</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">body</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">appendChild</span><span class=\"token punctuation\">(</span>$script<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 服务端返回e</span>\n<span class=\"token comment\">// getData({ ... })</span>\n</code></pre>\n<p><code>JSONP</code>只支持<code>get</code>而且需要后端配合</p>\n<h3 id=\"cors\">CORS</h3>\n<p>请求时，服务端在 HTTP 响应头设置<code>Access-Control-Allow-Origin</code>允许当前域跨域，浏览器就会允许跨域行为</p>\n<pre><code class=\"language-shell\">Access-Control-Allow-Origin: *\nAccess-Control-Allow-Origin: <span class=\"token operator\">&lt;</span>origin<span class=\"token operator\">></span>\n</code></pre>\n<h3 id=\"携带凭证的-cors\">携带凭证的 CORS</h3>\n<p>上方的请求是不携带凭证 <em>（如 cookie）</em> ，也就是说服务器无法认证你的信息，比如我们再 A 网站登录了，在 B 网站通过<code>AJAX</code>请求 A 网站是无法拿到需要凭证的信息的 _（如用户信息）_， 如果需要带上<code>cookie</code>还需要做其他处理，<a href=\"https://bill-lai.github.io/article/f81b918881d6fe131603\">参考我之前写过的文章</a></p>\n<h3 id=\"proxy\">Proxy</h3>\n<p>在客户端浏览器发起一个非同源请求会产生跨域问题，但是服务端并没有同源策略，服务端向另一个服务器发起请求不会产生跨域问题。那我们可以将请求统一到同源的服务器，对于要跨域的请求加上特定标识的 url 前缀，在服务器上匹配如果是这个前缀的请求，则反向代理到跨域服务器。</p>\n<p>我们在代理中还可以修改<code>Cookie</code>的<code>domain</code>信息，方便当前域<code>Cookie</code>的写入。</p>\n<p>这是目前最常用的方式，本地开发的跨域可以在本地建立代理，如果是线上则在线上创建代理。</p>\n<h2 id=\"canvas-跨域\">canvas 跨域</h2>\n<p><code>canvas</code>提供了一个通过<code>JavaScript</code>和<code>HTML</code>元素来绘制图形的方式，<code>canvas</code>可以从其他站点加载其他站点的资源，比如图片。在跨站引入资源没有处理时，<code>canvas</code>会被污染，只要被污染的画布就无法获取画布数据，如<code>toBlob、toDataURL、getImageData</code>一类<code>api</code>，这就产生的跨域问题。</p>\n<h3 id=\"cors、proxy\">CORS、Proxy</h3>\n<p><code>canvas</code>产生的跨域问题跟<code>AJAX</code>的处理方式差不多，可以借助<code>Proxy</code>，或者在 HTTP 响应头设置<code>Access-Control-Allow-Origin</code>。除此之外还需要对资源通过<code>crossorigin</code>属性声明不需要凭证信息。</p>\n<table>\n<thead>\n<tr>\n<th>属性值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>anonymous</code></td>\n<td>对此元素的<code>CORS</code>请求将不设置凭证标志</td>\n</tr>\n<tr>\n<td><code>use-credentials</code></td>\n<td>对此元素的<code>CORS</code>请求将设置凭证；这意味着请求将携带凭证</td>\n</tr>\n<tr>\n<td><code>&quot;&quot;</code></td>\n<td>设置空值，与设置<code>anonymous</code>效果一致</td>\n</tr>\n</tbody></table>\n<pre><code class=\"language-js\"><span class=\"token keyword\">const</span> canvas <span class=\"token operator\">=</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'canvas'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> context <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2d'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> img <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Image</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nimg<span class=\"token punctuation\">.</span><span class=\"token property-access\">crossOrigin</span> <span class=\"token operator\">=</span> <span class=\"token string\">'anonymous'</span>\nimg<span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    context<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">drawImage</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    context<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getImageData</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">width</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">height</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nimg<span class=\"token punctuation\">.</span><span class=\"token property-access\">src</span> <span class=\"token operator\">=</span> <span class=\"token string\">'xxx'</span>\n</code></pre>\n<h3 id=\"携带凭证的cors\">携带凭证的CORS</h3>\n<p>如果需要携带凭证除了声明<code>crossOrigin</code>属性值为<code>use-credentials</code>外还需要做其他处理，<a href=\"https://bill-lai.github.io/article/f81b918881d6fe131603\">参考我之前写过的文章</a>。</p>\n<p>完结撒花</p>\n","desc":"因为浏览器的同源策略而产生跨域问题，跨域主要是为了用户的上网安全。下面例举了前端最常见的三个跨域，以及处理方式\niframe 跨域\niframe跨域主要是为了防止恶意网站获取其他网站的dom，拿去私密信息，如果没有跨域恶意网站可以嵌套其他网站，比如https://mail.qq.com/，当用户输入","column":{"title":"javascript笔录","id":"8c7c4031e54f97dba0b7"}}