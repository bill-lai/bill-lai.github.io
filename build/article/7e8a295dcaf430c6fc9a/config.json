{"title":"JavaScript的宏任务与微任务","id":"7e8a295dcaf430c6fc9a","mtime":1644290431388,"ctime":1632734371528,"issues":{"number":5,"commentsUrl":"https://api.github.com/repos/bill-lai/bill-lai.github.io/issues/5/comments"},"head":null,"foot":null,"dirs":[{"leave":2,"title":"事件队列与事件循环","children":[]},{"leave":2,"title":"宏任务与微任务","children":[]},{"leave":2,"title":"思考","children":[{"leave":3,"title":"例子1：","children":[]},{"leave":3,"title":"例子2：","children":[]},{"leave":3,"title":"例子3：","children":[]},{"leave":3,"title":"例子4：","children":[]},{"leave":3,"title":"例子5：","children":[]},{"leave":3,"title":"答案","children":[]}]}],"body":"<h2 id=\"事件队列与事件循环\">事件队列与事件循环</h2>\n<p>&emsp;&emsp;我们都知道JavaScript是一门单线程非阻塞的脚本语言，这意味着JavaScript在执行期间都是只有一个主线程来处理所有任务的。而非阻塞是指当代码有异步任务是，主线程会挂起这个异步任务，当这个异步任务执行完毕后，主线程才会在适当时期去执行这个任务的回调。<br><br>&emsp;&emsp;当异步任务处理完毕后，JavaScript会将这个任务放置在一个队列中，我们称这个任务为<code>事件队列</code>。这个队列上的上的回调不会立即执行，而是当当前执行栈中的所有任务处理完之后才会去执行<code>事件队列</code>的任务。<br><br>&emsp;&emsp;<code>队列</code>是先进先出的线性表。在具体应用中通常用链表或者数组来实现。具体资料参考<a href=\"https://zh.wikipedia.org/wiki/%E9%98%9F%E5%88%97\">维基百科</a><br><br>&emsp;&emsp;当前执行栈执行完毕后，JavaScript会去检查当前事件队列是否有任务，如果有则将这个任务添加到当前执行栈中执行这个任务，当任务执行执行完毕后又重复这一操作，构成了一个循环，而这个循环我们就称之为<code>事件循环</code>。整体的流程如下图所示</p>\n<p><img src=\"/article/7e8a295dcaf430c6fc9a/./image/event-queue1.drawio.svg\" alt=\"event-queue\"></p>\n<h2 id=\"宏任务与微任务\">宏任务与微任务</h2>\n<p>&emsp;&emsp;异步任务分为两种类型，<code>微任务(microtask)</code>和<code>微任务(macrotask)</code>，不同类型的任务会被分配到不同的<code>事件队列</code>中，执行的时机也会有所不同，为了方便表达我把微任务事件队列称之为<code>微事件队列</code>，宏任务事件队列称之为<code>宏任务队列</code>。<br><br>&emsp;&emsp;<code>事件循环</code>检查当前事件队列时，首先检查当前<code>微事件队列</code>是否有任务，如果有则添加到当前执行栈执行，当执行完毕后再次检查，直到当前<code>微事件队列</code>为空后，再检查当前<code>宏事件队列</code>是否有任务，如果有则添加到当前执行栈执行。流程如下图所示</p>\n<p><img src=\"/article/7e8a295dcaf430c6fc9a/./image/event-queue2.drawio.svg\" alt=\"event-queue\"></p>\n<p>&emsp;&emsp;首次执行的代码其实也是宏任务，可以这么理解，因为是首次<code>微事件队列</code>是空的所以直接执行<code>宏任务队列</code>中的任务。除了首次加载外，<code>微事件队列</code>中的任务始终是先于<code>宏任务队列</code>任务执行的。<br></p>\n<p>微任务的事件包括以下几种</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/then\">Promise.then</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserver/MutationObserver\">MutaionObserver</a></li>\n<li><a href=\"https://www.apiref.com/javascript-zh/Reference/Global_Objects/Object/observe.htm\">Object.observe</a>(已废弃)</li>\n<li><a href=\"https://nodejs.org/dist/latest-v16.x/docs/api/process.html#process_process_nexttick_callback_args\">process.nextTick</a>(NodeJS) <br></li>\n</ul>\n<p>宏任务的事件包括以下几种</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout\">setTimeout</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/WindowOrWorkerGlobalScope/setInterval\">setInterval</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/setImmediate\">setImmediate</a>(非标准)</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/MessageChannel\">MessageChannel</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame\">requestAnimationFrame</a></li>\n<li>I/O(网页中读取文件，或NodeJS中)</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Building_blocks/Events#%E4%BD%BF%E7%94%A8%E7%BD%91%E9%A1%B5%E4%BA%8B%E4%BB%B6%E7%9A%84%E6%96%B9%E5%BC%8F\">UI交互事件</a></li>\n</ul>\n<h2 id=\"思考\">思考</h2>\n<p>请思考下面几个例子在控制台输出的顺序，最后会贴出答案。<br></p>\n<h3 id=\"例子1：\">例子1：</h3>\n<pre><code class=\"language-js\"><span class=\"token comment\">// 微任务</span>\n<span class=\"token keyword\">const</span> promise <span class=\"token operator\">=</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">microtask</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">cb</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  promise<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>cb<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 宏任务</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">macrotask</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">cb</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>cb<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">macrotask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'macrotask 1'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">macrotask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'macrotask 2'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">microtask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'microtask 1'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h3 id=\"例子2：\">例子2：</h3>\n<pre><code class=\"language-js\"><span class=\"token function\">macrotask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">microtask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'microtask 2'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'macrotask 1'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">macrotask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'macrotask 2'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">microtask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'microtask 3'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">microtask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'microtask 1'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>下面三个例子，我大概模拟了vue2渲染函数的原理:<br></p>\n<h3 id=\"例子3：\">例子3：</h3>\n<pre><code class=\"language-js\"><span class=\"token comment\">/**\n * html:\n * &lt;div id=\"output\">&lt;/div>\n **/</span>\n\n<span class=\"token keyword\">const</span> stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">nextTick</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">cb</span> <span class=\"token operator\">=></span> <span class=\"token function\">microtask</span><span class=\"token punctuation\">(</span>cb<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">render</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">fn</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">nextTick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> index <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        stack<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">observeItem</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">obj<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">,</span> renderFn</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>newVal<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>renderFn<span class=\"token punctuation\">)</span>\n      val <span class=\"token operator\">=</span> newVal\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> val\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">observe</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">obj<span class=\"token punctuation\">,</span> renderFn</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">observeItem</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> renderFn<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">renderFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> count<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> $container <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#output'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>\n  data<span class=\"token punctuation\">,</span> \n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> $container<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">nextTick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>$container<span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\ndata<span class=\"token punctuation\">.</span>count <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\n</code></pre>\n<h3 id=\"例子4：\">例子4：</h3>\n<pre><code class=\"language-js\">data<span class=\"token punctuation\">.</span>count <span class=\"token operator\">=</span> <span class=\"token number\">200</span>\n<span class=\"token function\">nextTick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>$container<span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h3 id=\"例子5：\">例子5：</h3>\n<pre><code class=\"language-js\"><span class=\"token function\">macrotask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>$container<span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\ndata<span class=\"token punctuation\">.</span>count <span class=\"token operator\">=</span> <span class=\"token number\">300</span>\n</code></pre>\n<p><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></p>\n<h3 id=\"答案\">答案</h3>\n<p>答案在下方，这里就不再解释了，记住<b>除了首次执行外微任务始终于宏任务前执行，&gt;事件队列始终是先进先出，宏事件队列与微任务队列谁先加入谁先执行</b>，那么这些题目就难不倒你了。</p>\n<pre><code class=\"language-js\"><span class=\"token comment\">// 例子1</span>\n<span class=\"token comment\">// \"microtask 1\"</span>\n<span class=\"token comment\">// \"macrotask 1\"</span>\n<span class=\"token comment\">// \"macrotask 2\"</span>\n\n<span class=\"token comment\">// 例子2</span>\n<span class=\"token comment\">// \"microtask 1\"</span>\n<span class=\"token comment\">// \"macrotask 1\"</span>\n<span class=\"token comment\">// \"microtask 2\"</span>\n<span class=\"token comment\">// \"macrotask 2\"</span>\n<span class=\"token comment\">// \"microtask 3\"</span>\n\n<span class=\"token comment\">// 例子3</span>\n<span class=\"token comment\">// \"0\"</span>\n\n<span class=\"token comment\">// 例子4</span>\n<span class=\"token comment\">// \"200\"</span>\n\n<span class=\"token comment\">// 例子5</span>\n<span class=\"token comment\">// \"300\"</span>\n</code></pre>\n","desc":"事件队列与事件循环\n  我们都知道JavaScript是一门单线程非阻塞的脚本语言，这意味着JavaScript在执行期间都是只有一个主线程来处理所有任务的。而非阻塞是指当代码有异步任务是，主线程会挂起这个异步任务，当这个异步任务执行完毕后，主线程才会在适当时期去执行这个任务的回调。  当异步任务处","column":{"title":"javascript笔录","id":"8c7c4031e54f97dba0b7"}}