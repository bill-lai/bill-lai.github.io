{"title":"canvas与屏幕坐标的互相转换","id":"13494122c038a34839ac","mtime":1633010959616,"ctime":1632734610917,"head":null,"foot":null,"dirs":[{"leave":2,"title":"解决思路","children":[]},{"leave":2,"title":"源码","children":[]},{"leave":2,"title":"兼容性","children":[]}],"body":"<p>最近在制作公司的一个项目时有运用到<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API\">canvas</a>与屏幕坐标互相转换的一个知识点，如果没有进行<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API\">canvas</a><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/scale\">缩放</a>、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/rotate\">旋转</a>、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/translate\">平移</a>一系列操作时，这个需求还是比较简单的，但是如果操作复杂起来后，要再进行转换，在不知道一些特定api就显得比较困难了，在查阅了了一些资料后解决了这个需求这里分享给大家。</p>\n<h2 id=\"解决思路\">解决思路</h2>\n<p>解决这个需求时引用了两个API，分别是<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/getTransform\">CanvasRenderingContext2D.getTransform()</a>、<br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/DOMMatrix\">DOMMatrix.invertSelf()</a><br></p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/getTransform\">CanvasRenderingContext2D.getTransform()</a>可以获取当前<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API\">canvas</a>上下文的被应用的转换矩阵，返回<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/DOMMatrix\">DOMMatrix</a>对象。<br><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/DOMMatrix\">DOMMatrix.invertSelf()</a>可以获取当前矩阵逆转后的结果，注意这个api是会修改自身矩阵的。<br><br>我们通过这两个API可以获取当前canvas的<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/DOMMatrix\">DOMMatrix</a>，然后将其逆转，通过逆转后的转换矩阵就可以获取屏幕坐标转对应的canvas坐标了。</p>\n<h2 id=\"源码\">源码</h2>\n<pre><code class=\"language-js\"><span class=\"token comment\">// 获取canvas的逆转转换矩阵</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getCanvasInverImatrix</span> <span class=\"token operator\">=</span> $canvas <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> ctx <span class=\"token operator\">=</span> $canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2d'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> transform <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">getTransform</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> transform<span class=\"token punctuation\">.</span><span class=\"token function\">invertSelf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// canvas坐标转屏幕坐标</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">canvasConversionScreen</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">$canvas<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> x<span class=\"token punctuation\">,</span> y <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> imatrix <span class=\"token operator\">=</span> <span class=\"token function\">getCanvasInverImatrix</span><span class=\"token punctuation\">(</span>$canvas<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 如果不能求逆is2D()将会为false</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>imatrix<span class=\"token punctuation\">.</span><span class=\"token function\">is2D</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> \n      a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> \n      d<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">,</span> f \n    <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> imatrix\n\n    <span class=\"token keyword\">const</span> screenX <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span> y <span class=\"token operator\">-</span> d <span class=\"token operator\">*</span> x <span class=\"token operator\">+</span> d <span class=\"token operator\">*</span> e <span class=\"token operator\">-</span> c <span class=\"token operator\">*</span> f<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span> c <span class=\"token operator\">-</span> a <span class=\"token operator\">*</span> d<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> screenY <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">-</span> screenX <span class=\"token operator\">*</span> b <span class=\"token operator\">-</span> f<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> d\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      x<span class=\"token operator\">:</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span>screenX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      y<span class=\"token operator\">:</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span>screenY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      x<span class=\"token operator\">:</span> <span class=\"token number\">NaN</span><span class=\"token punctuation\">,</span>\n      y<span class=\"token operator\">:</span> <span class=\"token number\">NaN</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 屏幕坐标转canvas坐标</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">screenConversionCanvas</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">$canvas<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> x<span class=\"token punctuation\">,</span> y <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> imatrix <span class=\"token operator\">=</span> <span class=\"token function\">getCanvasInverImatrix</span><span class=\"token punctuation\">(</span>$canvas<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>imatrix<span class=\"token punctuation\">.</span><span class=\"token function\">is2D</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> \n      a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> \n      d<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">,</span> f \n    <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> imatrix\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      x<span class=\"token operator\">:</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">*</span> a <span class=\"token operator\">+</span> y <span class=\"token operator\">*</span> c <span class=\"token operator\">+</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      y<span class=\"token operator\">:</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">*</span> b <span class=\"token operator\">+</span> y <span class=\"token operator\">*</span> d <span class=\"token operator\">+</span> f<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      x<span class=\"token operator\">:</span> <span class=\"token number\">NaN</span><span class=\"token punctuation\">,</span>\n      y<span class=\"token operator\">:</span> <span class=\"token number\">NaN</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>注意：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/DOMMatrix\">DOMMatrix.invertSelf()</a> 是会修改自身矩阵的，所以切忌多次调用，多次调用会逆转后再次逆转。当canvas在网页中不是位于左上角时，传入的屏幕坐标还要进行视口处理，推荐使用<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Element/getBoundingClientRect\">Element.getBoundingClientRect()</a>API。</p>\n</blockquote>\n<h2 id=\"兼容性\">兼容性</h2>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/getTransform\">CanvasRenderingContext2D.getTransform()</a><br><img src=\"/article/13494122c038a34839ac/./image/getTranform.webp\" alt=\"getTransform-compatibility.png\"></p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/DOMMatrix\">DOMMatrix.invertSelf()</a><br><img src=\"/article/13494122c038a34839ac/./image/invertSelf.webp\" alt=\"inverSelf-compatibility.png\"></p>\n<p>可以看到兼容性还是比较良好的，如果没有要求兼容IE就放心大胆的用吧。</p>\n","desc":"最近在制作公司的一个项目时有运用到canvas与屏幕坐标互相转换的一个知识点，如果没有进行canvas缩放、旋转、平移一系列操作时，这个需求还是比较简单的，但是如果操作复杂起来后，要再进行转换，在不知道一些特定api就显得比较困难了，在查阅了了一些资料后解决了这个需求这里分享给大家。\n解决思路\n解决"}