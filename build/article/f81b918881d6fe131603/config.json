{"title":"跨站请求如何携带凭证","id":"f81b918881d6fe131603","mtime":1648784155625,"ctime":1648780533657,"issues":{"number":31,"commentsUrl":"https://api.github.com/repos/bill-lai/bill-lai.github.io/issues/31/comments","reactionsUrl":"https://api.github.com/repos/bill-lai/bill-lai.github.io/issues/31/reactions"},"head":null,"foot":null,"dirs":[{"leave":2,"title":"站请求怎么成功","children":[]},{"leave":2,"title":"如何携带凭据","children":[]},{"leave":2,"title":"新版本，安全性升级","children":[]}],"body":"<h2 id=\"站请求怎么成功\">站请求怎么成功</h2>\n<p>跨站请求需要服务端同意，在指定请求响应头中设置<code>Access-Control-Allow-Origin</code>指定该响应允许被哪些域共享。</p>\n<pre><code class=\"language-shell\">Access-Control-Allow-Origin: *\nAccess-Control-Allow-Origin: <span class=\"token operator\">&lt;</span>origin<span class=\"token operator\">></span>\n</code></pre>\n<p>将<code>Access-Control-Allow-Origin</code>设置为我们的域名之后即可成功访问。</p>\n<h2 id=\"如何携带凭据\">如何携带凭据</h2>\n<p>通过<code>Access-Control-Allow-Origin</code>可以成功跨站访问，但是我们通过<code>debug</code>会发现，请求没有携带<code>cookie</code>，这是因为我们没有在请求中指示是否要使用<code>cookie、authorization、headers</code>或者<code>TLS</code>客户端证书等凭据来创建跨站点访问。可以通过请求的<code>withCredentials</code>属性来开启它。</p>\n<pre><code class=\"language-js\"><span class=\"token keyword\">const</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHtppRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token property-access\">withCredentials</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'http://example.com'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">send</span><span class=\"token punctuation\">(</span><span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>我们再刷新请求会发现请求直接报错了，这是因为我们请求指示要求服务器允许使用凭据，但是服务器响应并没有指示允许。这时候还要在响应头中设置<code>Access-Control-Allow-Credentials</code>为<code>true</code>来明确允许。除此之外<code>Access-Control-Allow-Origin</code>不能是通配符比如<code>*</code>，而是必须是明确的值，就是必须明确允许请求的域</p>\n<pre><code class=\"language-shell\">Access-Control-Allow-Credentials: <span class=\"token boolean\">true</span>\nAccess-Control-Allow-Origin: <span class=\"token operator\">&lt;</span>origin<span class=\"token operator\">></span>\n</code></pre>\n<p>在旧版的浏览器中，基于上方的配置就能成功在请求中携带<code>cookie</code>了。</p>\n<h2 id=\"新版本，安全性升级\">新版本，安全性升级</h2>\n<p>我们基于上访配置在<code>chrome51</code>之后的浏览器访问会发现依旧没有携带上<code>cookie</code>访问，这是因为在<code>chrome51</code>之后浏览器对<code>cookie</code>新增了一个会影响跨站携带凭证的属性 <strong>SameSite</strong>，下面是这个属性的值：</p>\n<ul>\n<li><code>Strict</code>，严格的，完全禁止第三方<code>cookie</code>，只有当前网页URL与请求目标一致才会携带。可能造成不好的用户体验，比如从一个<code>github</code>连接点击进去不会携带<code>cookie</code>会被判断为未登录</li>\n<li><code>Lax</code>，稍微宽松，大多数不允许第三方<code>cookie</code>，从导航到目标地址的<code>Get</code> <em>（链接，预加载请求，GET表单）</em> 除外。</li>\n<li><code>None</code>允许第三方跨站访问携带<code>cookie</code>，该属性有一个要求，必须同时为<code>cookie</code>设置<code>Secure</code> _（该值指明cookie只能在https请求中被携带）_，第三方必须是<code>https</code>协议的源。</li>\n</ul>\n<p>所以除了对新版本中响应的<code>cookie</code>设置为<code>SameSite=None; Secure</code>外，请求放必须是<code>https</code>站点。</p>\n<pre><code class=\"language-shell\">Set-Cookie: xxx<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">SameSite</span><span class=\"token operator\">=</span>None<span class=\"token punctuation\">;</span> Secure\n</code></pre>\n","desc":"站请求怎么成功\n跨站请求需要服务端同意，在指定请求响应头中设置Access-Control-Allow-Origin指定该响应允许被哪些域共享。\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Origin: <origin>\n\n将Access","column":{"title":"http","id":"72990761b6dfce2c298d"}}