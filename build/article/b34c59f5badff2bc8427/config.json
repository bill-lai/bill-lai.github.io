{"title":"vue3-effectScope源码解析","id":"b34c59f5badff2bc8427","mtime":1646295174627,"ctime":1646295167931,"issues":{"number":23,"commentsUrl":"https://api.github.com/repos/bill-lai/bill-lai.github.io/issues/23/comments","reactionsUrl":"https://api.github.com/repos/bill-lai/bill-lai.github.io/issues/23/reactions"},"head":null,"foot":null,"dirs":[{"leave":2,"title":"阅读准备","children":[]},{"leave":2,"title":"effectScope","children":[{"leave":3,"title":"recordEffectScope","children":[]},{"leave":3,"title":"stop","children":[]},{"leave":3,"title":"onScopeDispose","children":[]},{"leave":3,"title":"getCurrentScope","children":[]}]}],"body":"<h2 id=\"阅读准备\">阅读准备</h2>\n<blockquote>\n<p>本文使用的<code>vue</code>版本为<code>3.2.26</code>。在阅读 <code>effectScope</code> 源码之前，我们需要知道它的特性，可以通过阅读单例测试源码或者是阅读官网的 <code>API</code>了解特性，推荐阅读单例，了解特性在后面阅读时才能更好理解。</p>\n</blockquote>\n<p>&emsp;&emsp;在<code>vue3</code>中可以使用<code>effectScope</code>函数创建一个统一管理<code>effect</code>的对象。注入到这个对象的<code>effect</code>会被记录到<code>effects</code>属性中，当执行<code>stop</code>方法时，被记录的所有<code>effect</code>都会停止监听。既然是管理<code>effect</code>自然也就包括<code>computed</code>和<code>deferredComputed</code>，因为他们内部是通过<code>effect</code>实现的，具体参考之前文章<a href=\"https://bill-lai.github.io/article/b9bbb26eba4dacdc2312\">vue3-computed源码解析</a>。</p>\n<p>&emsp;&emsp;<code>effectScope</code>也会记录子<code>effectScope</code>，当停止监听时子级也会同时停止。这个<code>api</code>很少人使用，我们稍微简单看看使用方式：</p>\n<pre><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> effectScope<span class=\"token punctuation\">,</span> reactive <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span>\n\n<span class=\"token keyword\">let</span> dummy<span class=\"token punctuation\">,</span> doubled\n<span class=\"token keyword\">const</span> counter <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> num<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> scope <span class=\"token operator\">=</span> <span class=\"token function\">effectScope</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nscope<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">effect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>dummy <span class=\"token operator\">=</span> counter<span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 子级scope</span>\n  <span class=\"token function\">effectScope</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">effect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>doubled <span class=\"token operator\">=</span> counter<span class=\"token punctuation\">.</span>num <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 收集到的effect</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>scope<span class=\"token punctuation\">.</span>effects<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 1</span>\n<span class=\"token comment\">// 收集到的子级scope</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>scope<span class=\"token punctuation\">.</span>scopes<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 1</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>dummy<span class=\"token punctuation\">)</span>    <span class=\"token comment\">// 0</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>doubled<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 0</span>\ncounter<span class=\"token punctuation\">.</span>num <span class=\"token operator\">=</span> <span class=\"token number\">7</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>dummy<span class=\"token punctuation\">)</span>    <span class=\"token comment\">// 7</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>doubled<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 14</span>\n\n<span class=\"token comment\">// 停止所有监听，子级都会停止</span>\nscope<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\ncounter<span class=\"token punctuation\">.</span>num <span class=\"token operator\">=</span> <span class=\"token number\">6</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>dummy<span class=\"token punctuation\">)</span>    <span class=\"token comment\">// 7</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>doubled<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 14</span>\n</code></pre>\n<p>&emsp;&emsp;<code>effectScope</code>有一个可选参数为<code>boolean</code>，当传入<code>true</code>时表示阻断与父级的联系，阻断后这个<code>scope</code>对象将不会与父级关联，成为独立的<code>scope</code>。父级的<code>stop</code>也不会影响到它。比如：</p>\n<pre><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> effectScope<span class=\"token punctuation\">,</span> reactive <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span>\n\n<span class=\"token keyword\">let</span> dummy<span class=\"token punctuation\">,</span> doubled\n<span class=\"token keyword\">const</span> counter <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> num<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> scope <span class=\"token operator\">=</span> <span class=\"token function\">effectScope</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nscope<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">effect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>dummy <span class=\"token operator\">=</span> counter<span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 阻断父级收集</span>\n  <span class=\"token function\">effectScope</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">effect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>doubled <span class=\"token operator\">=</span> counter<span class=\"token punctuation\">.</span>num <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>scope<span class=\"token punctuation\">.</span>effects<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 1</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>scope<span class=\"token punctuation\">.</span>scopes<span class=\"token punctuation\">)</span>   <span class=\"token comment\">// undefined</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>dummy<span class=\"token punctuation\">)</span>    <span class=\"token comment\">// 0</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>doubled<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 0</span>\ncounter<span class=\"token punctuation\">.</span>num <span class=\"token operator\">=</span> <span class=\"token number\">7</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>dummy<span class=\"token punctuation\">)</span>    <span class=\"token comment\">// 7</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>doubled<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 14</span>\n\n<span class=\"token comment\">// 停止所有监听，子级被阻断</span>\nscope<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\ncounter<span class=\"token punctuation\">.</span>num <span class=\"token operator\">=</span> <span class=\"token number\">6</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>dummy<span class=\"token punctuation\">)</span>    <span class=\"token comment\">// 7</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>doubled<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 12</span>\n</code></pre>\n<h2 id=\"effectscope\">effectScope</h2>\n<p>&emsp;&emsp;现在我们了解<code>effectScope</code>的作用与特性了，接下来我们看看它是怎么实现的</p>\n<pre><code class=\"language-ts\"><span class=\"token comment\">// 当前正在执行的scope</span>\n<span class=\"token keyword\">let</span> activeEffectScope<span class=\"token operator\">:</span> EffectScope <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span>\n<span class=\"token comment\">// 可能轮询调用，记录栈</span>\n<span class=\"token keyword\">const</span> effectScopeStack<span class=\"token operator\">:</span> EffectScope<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EffectScope</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 是否被停止了</span>\n  active <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n  <span class=\"token comment\">// 记录的effects</span>\n  effects<span class=\"token operator\">:</span> ReactiveEffect<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token comment\">// 用户注入的清除函数</span>\n  cleanups<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token comment\">// 父级</span>\n  parent<span class=\"token operator\">:</span> EffectScope <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span>\n  <span class=\"token comment\">// 子级scopes</span>\n  scopes<span class=\"token operator\">:</span> EffectScope<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span>\n  \n  <span class=\"token comment\">// 索引，方便删除，记住当前scope在父级中的位置</span>\n  <span class=\"token keyword\">private</span> index<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span>\n\n  <span class=\"token comment\">// 是否需要阻断</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>detached <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 如果不阻断，则要记录父级关系</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>detached <span class=\"token operator\">&amp;&amp;</span> activeEffectScope<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 当前正在使用的effect作用域作为父级</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> activeEffectScope\n      <span class=\"token comment\">// 记住当前作用域在父级中的位置</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>index <span class=\"token operator\">=</span>\n        <span class=\"token punctuation\">(</span>activeEffectScope<span class=\"token punctuation\">.</span>scopes <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>activeEffectScope<span class=\"token punctuation\">.</span>scopes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>\n          <span class=\"token keyword\">this</span>\n        <span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 用户执行操作</span>\n  <span class=\"token generic-function\"><span class=\"token function\">run</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">fn</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>active<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 打开effect收集</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// 执行用户方法</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 关闭收集</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">off</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>__DEV__<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">cannot run an inactive effect scope.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 开启收集</span>\n  <span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>active<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 将当前scope入栈，并设置为当前effect</span>\n      effectScopeStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n      activeEffectScope <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 关闭收集</span>\n  <span class=\"token function\">off</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>active<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 出栈，并恢复正在使用的effectScope</span>\n      effectScopeStack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      activeEffectScope <span class=\"token operator\">=</span> effectScopeStack<span class=\"token punctuation\">[</span>effectScopeStack<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 统一停止收集到的effect监听，传入是否是父级删除标志</span>\n  <span class=\"token function\">stop</span><span class=\"token punctuation\">(</span>fromParent<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>active<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 停止所有effect</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>effects<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">=></span> e<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token comment\">// 执行用户注册的清除函数</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cleanups<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>cleanup <span class=\"token operator\">=></span> <span class=\"token function\">cleanup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n      <span class=\"token comment\">// 停止所有子级scope，并传入是父级停止</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>scopes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>scopes<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">=></span> e<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token comment\">// 停止监听，如果是自身停止，也要从父级中删除，防止内存泄漏</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>parent <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>fromParent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 直接从父级中删除一个，判断是否是当前，如果不是则跟当前替换位置</span>\n        <span class=\"token keyword\">const</span> last <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>scopes<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>last <span class=\"token operator\">&amp;&amp;</span> last <span class=\"token operator\">!==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>scopes<span class=\"token operator\">!</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>index<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> last\n          last<span class=\"token punctuation\">.</span>index <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>index<span class=\"token operator\">!</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token comment\">// 标识当前已经停止</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>active <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 创建effect作用域对象</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">effectScope</span><span class=\"token punctuation\">(</span>detached<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EffectScope</span><span class=\"token punctuation\">(</span>detached<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>&emsp;&emsp;<code>effectScope</code>函数只是创建<code>EffectScope</code>对象并抛出。这个类里面的关联实现并不多，相对比较简单。</p>\n<p>&emsp;&emsp;<code>scope</code>记录关联的<code>effect</code>与子级<code>scope</code>是在<code>run</code>方法实现上。用户传入操作函数即可记录函数中创建的子级<code>scope</code>与<code>effect</code>。他们是如何实现的呢，在执行前会通过<code>on</code>函数开启收集，记录当前<code>scope</code>，并让<code>scope</code>入栈，然后再执行操作函数。执行完毕执行<code>off</code>关闭收集，恢复上一次当前<code>scope</code>。</p>\n<p>&emsp;&emsp;<code>scope</code>实例化时会判断当前是否需要阻断，如果不阻断则在记录当前<code>scope</code>与实例化的<code>scope</code>父子关系。并记录实例化的<code>scope</code>的父级存储在<code>parent</code>，以及自身在父级<code>scopes</code>的位置，方便管理。这一步就收集到了子级<code>scope</code>。</p>\n<h3 id=\"recordeffectscope\">recordEffectScope</h3>\n<p>&emsp;&emsp;在之前<a href=\"https://bill-lai.github.io/article/37495e00ab36e870f8dd\">vue3-effect源码解析</a>一章有看到，实例化<code>effect</code>时会执行<code>recordEffectScope(this, scope)</code>，这个方法用来记录<code>effect</code>与<code>scope</code>的关系的，我们看看它是如何实现的</p>\n<pre><code class=\"language-ts\"><span class=\"token comment\">// 记录effect作用域</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">recordEffectScope</span><span class=\"token punctuation\">(</span>\n  effect<span class=\"token operator\">:</span> ReactiveEffect<span class=\"token punctuation\">,</span>\n  scope<span class=\"token operator\">?</span><span class=\"token operator\">:</span> EffectScope <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 如果没有指定则默认是当前激活的scope</span>\n  scope <span class=\"token operator\">=</span> scope <span class=\"token operator\">||</span> activeEffectScope\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>scope <span class=\"token operator\">&amp;&amp;</span> scope<span class=\"token punctuation\">.</span>active<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 记录</span>\n    scope<span class=\"token punctuation\">.</span>effects<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>effect<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>&emsp;&emsp;当<code>effect</code>实例化时会判断是否有明确指定<code>scope</code>，如果没有则使用当前<code>scope</code>作为他的作用域。然后记录到<code>effects</code>属性上，这一步就收集到了关联的<code>effect</code></p>\n<h3 id=\"stop\">stop</h3>\n<p>&emsp;&emsp;<code>scope.stop</code>会停止自身收集到的<code>effect</code>监听，然后再调用子级<code>stop</code>函数停止子级的<code>effect</code>监听，这样相关联的所有<code>effect</code>都被停止监听。</p>\n<p>&emsp;&emsp;<code>scope.stop</code>有一个参数标记当前是自身停止的还是父级调用停止收集的，如果是自身调用则解除自身与父级的关联，父级调用的则不需要解除与父级的关联。也就是说<strong>停止关联只会影响父级的<code>scopes</code>，自身并不影响</strong>。并通过<code>active</code>属性将<code>scope</code>标识为已停止。</p>\n<h3 id=\"onscopedispose\">onScopeDispose</h3>\n<p>&emsp;&emsp;<code>scope</code>通过<code>onScopeDispose</code>方法来注册用户的当<code>stop</code>时的回调，并收集在<code>scope</code>的<code>cleanups</code>属性上。注意<code>onScopeDispose</code>只能在<code>scope.run</code>的操作函数注册。下面我们看看源码：</p>\n<pre><code class=\"language-ts\"><span class=\"token comment\">// 注册stop scope时的回调</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">onScopeDispose</span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">fn</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>activeEffectScope<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    activeEffectScope<span class=\"token punctuation\">.</span>cleanups<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>__DEV__<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span>\n      <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">onScopeDispose() is called when there is no active effect scope</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">+</span>\n        <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"> to be associated with.</span><span class=\"token template-punctuation string\">`</span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>&emsp;&emsp;非常简单只是判断当前是否存在当前<code>scope</code>，如果存在则记录到<code>cleanups</code>属性上，当<code>scope.stop</code>是就执行它们。</p>\n<h3 id=\"getcurrentscope\">getCurrentScope</h3>\n<p>&emsp;&emsp;<code>vue</code>还提供<code>getCurrentScope</code>方法来访问当前<code>scope</code></p>\n<pre><code class=\"language-js\"><span class=\"token comment\">// 获取当前作用域</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getCurrentScope</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> activeEffectScope\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>&emsp;&emsp;到这里<code>effectScope</code>就讲完了，emm，vue3-reactivity源码解析系列也更新完了。后面有时间我再开个专题vue3-runtime-core源码解析。完结撒花。</p>\n<p>上一章：<a href=\"https://bill-lai.github.io/article/b9bbb26eba4dacdc2312/\">vue3-computed源码解析</a></p>\n","desc":"阅读准备\n\n本文使用的vue版本为3.2.26。在阅读 effectScope 源码之前，我们需要知道它的特性，可以通过阅读单例测试源码或者是阅读官网的 API了解特性，推荐阅读单例，了解特性在后面阅读时才能更好理解。\n\n  在vue3中可以使用effectScope函数创建一个统一管理effect","column":{"title":"vue3-reactivity源码解析","id":"94e7945213d9a62f838c"}}