{"title":"使用操作符做标志管理","id":"9c6d734aa72e04e0f8dd","mtime":1648476981211,"ctime":1632734371528,"issues":{"number":6,"commentsUrl":"https://api.github.com/repos/bill-lai/bill-lai.github.io/issues/6/comments"},"head":null,"foot":null,"dirs":[{"leave":2,"title":"左移(>>)","children":[]},{"leave":2,"title":"按位或(|)","children":[]},{"leave":2,"title":"按位与(&)","children":[]},{"leave":2,"title":"按位非 (~)","children":[]},{"leave":2,"title":"使用 >>、 |、 &、 ~ 做标志管理","children":[{"leave":3,"title":"拼合多个标志","children":[]},{"leave":3,"title":"是否包含","children":[]},{"leave":3,"title":"是否不包含某个标志","children":[]},{"leave":3,"title":"判断是否只有某个标志","children":[]},{"leave":3,"title":"添加标志","children":[]},{"leave":3,"title":"删除标志","children":[]}]},{"leave":2,"title":"优缺点","children":[]}],"body":"<p>什么是标志？标志就是显示事物特征，便于识别的记号。在程序中我们通常使用枚举来表示标志，比如权限标志：</p>\n<pre><code class=\"language-js\"><span class=\"token comment\">// authorityFlag.js</span>\n\n<span class=\"token comment\">// 是否有查询权限</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">QUERY</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token comment\">// 是否有更新权限</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">UPDATE</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n<span class=\"token comment\">// 是否有删除权限</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">DELETE</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n<span class=\"token comment\">// 是否有新增权限</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">INSERT</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span>\n</code></pre>\n<p>以往我们通常是使用数组来这这类标志管理的</p>\n<pre><code class=\"language-js\"><span class=\"token comment\">// 用户拥有的权限</span>\n<span class=\"token keyword\">const</span> userAuths <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">QUERY</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">UPDATE</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">INSERT</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">// 是否包含权限</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">containFlag</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">auths<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token spread operator\">...</span>flags<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> \n  flags<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">every</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">flag</span> <span class=\"token arrow operator\">=></span> auths<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">includes</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 是否没有权限</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">noContainFlag</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">auths<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token spread operator\">...</span>flags<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span>\n  flags<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">every</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">flag</span> <span class=\"token arrow operator\">=></span> <span class=\"token operator\">!</span>auths<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">includes</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 是否只有某个权限</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">equalFlag</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">auths<span class=\"token punctuation\">,</span> flag</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span>\n  flags<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">===</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> flags<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> flag\n\n<span class=\"token comment\">// 添加权限</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addFlag</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">auths<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token spread operator\">...</span>flags<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  flags<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">flag</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">containFlag</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      auths<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 删除权限</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">removeFlag</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">auths<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token spread operator\">...</span>flags<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  flags<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">flag</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> index <span class=\"token operator\">=</span> flags<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">indexOf</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      flags<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">splice</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>现在我给大家分享使用<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Left_shift\">左移(&gt;&gt;)</a>、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_OR\">按位或(|)</a>、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_AND\">按位与(&amp;)</a>、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_OR\">按位或(|)</a>、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_AND\">按位非(~)</a>四种操作符结合做标志管理的方法</p>\n<h2 id=\"左移\">左移(&gt;&gt;)</h2>\n<p>左移操作符 (&lt;&lt;) 将第一个操作数向左移动指定位数，左边超出的位数将会被清除，右边将会补零。比如：</p>\n<pre><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">numToBinaryString</span> <span class=\"token operator\">=</span> \n  <span class=\"token parameter\">num</span> <span class=\"token arrow operator\">=></span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">numToBinaryString</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 00000000000000000000000000000101</span>\n<span class=\"token function\">numToBinaryString</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 00000000000000000000000000010100</span>\n<span class=\"token function\">numToBinaryString</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 00000000000000000000000000101000</span>\n</code></pre>\n<h2 id=\"按位或\">按位或(|)</h2>\n<p>按位或运算符 (|) 其中一个操作数或两个都是 1，则这个位上返回 1 。可以看作每个操作数的||操作符比较好理解，比如：</p>\n<pre><code class=\"language-js\"><span class=\"token function\">numToBinaryString</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 00000000000000000000000000000101</span>\n<span class=\"token function\">numToBinaryString</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 00000000000000000000000000000011</span>\n<span class=\"token function\">numToBinaryString</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token operator\">|</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 00000000000000000000000000000111</span>\n</code></pre>\n<h2 id=\"按位与\">按位与(&amp;)</h2>\n<p>按位与运算符 (&amp;) 两个操作数对应的位都是 1，则这个位上返回 1 。可以看作每个操作数的&amp;&amp;操作符比较好理解，比如：</p>\n<pre><code class=\"language-js\"><span class=\"token function\">numToBinaryString</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 00000000000000000000000000000101</span>\n<span class=\"token function\">numToBinaryString</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 00000000000000000000000000000011</span>\n<span class=\"token function\">numToBinaryString</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 00000000000000000000000000000001</span>\n</code></pre>\n<h2 id=\"按位非-\">按位非 (~)</h2>\n<p>按位非运算符（~），反转操作数的位。可以看作所有位数1 0 反转,比如:</p>\n<pre><code class=\"language-js\"><span class=\"token function\">numToBinaryString</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 00000000000000000000000000000101</span>\n<span class=\"token function\">numToBinaryString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">~</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 11111111111111111111111111111010</span>\n</code></pre>\n<h2 id=\"使用-、-、-、--做标志管理\">使用 &gt;&gt;、 |、 &amp;、 ~ 做标志管理</h2>\n<p>因为三个运算符的特殊关系，所以我们需要在二进制数中，每个状态都只有一个位数是1，且不能相同，如下</p>\n<pre><code class=\"language-js\"><span class=\"token comment\">// before</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">QUERY</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">UPDATE</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">DELETE</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">INSERT</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span>\n\n<span class=\"token comment\">// after                </span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">QUERY</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>         <span class=\"token comment\">// 00000000000000000000000000000001</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">UPDATE</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">2</span>   <span class=\"token comment\">// 00000000000000000000000000000010</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">DELETE</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">3</span>   <span class=\"token comment\">// 00000000000000000000000000000100</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">INSERT</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">4</span>   <span class=\"token comment\">// 00000000000000000000000000001000</span>\n</code></pre>\n<p>那是如何管理这些标志的呢，相信你已经聪明的你猜到了，</p>\n<h3 id=\"拼合多个标志\">拼合多个标志</h3>\n<p>因为 <code>按位或(|)</code> 的特性，我们可以将拥有的标志的位数都联合起来</p>\n<pre><code class=\"language-js\"><span class=\"token comment\">// before</span>\n<span class=\"token keyword\">const</span> userAuths <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">QUERY</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">UPDATE</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">INSERT</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">//after</span>\n<span class=\"token keyword\">const</span> userAuths <span class=\"token operator\">=</span> <span class=\"token constant\">QUERY</span> <span class=\"token operator\">|</span> <span class=\"token constant\">UPDATE</span> <span class=\"token operator\">|</span> <span class=\"token constant\">INSERT</span>   <span class=\"token comment\">// 00000000000000000000000000001011</span>\n</code></pre>\n<h3 id=\"是否包含\">是否包含</h3>\n<p>因为 <code>按位与(&amp;)</code> 的特性，我们可以单独判断是否拥有某个标志，因为只有两个位数都为1才会为1,只要结果不为0即为存在</p>\n<pre><code class=\"language-js\"><span class=\"token comment\">// before</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">containFlag</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">auths<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token spread operator\">...</span>flags<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> \n  flags<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">every</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">flag</span> <span class=\"token arrow operator\">=></span> auths<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">includes</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//after</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">containFlag</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">auths<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token spread operator\">...</span>flags<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span>\n  flags<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">every</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">flag</span> <span class=\"token arrow operator\">=></span> auths <span class=\"token operator\">&amp;</span> flag<span class=\"token punctuation\">)</span>\n<span class=\"token doc-comment comment\">/**\n * 比如 auths &amp; QUERY运算结果为\n *  00000000000000000000000000001011\n *  00000000000000000000000000000001\n * =00000000000000000000000000000001\n * =1\n * 比如 auths &amp; DELETE运算结果为\n *  00000000000000000000000000001011\n *  00000000000000000000000000000100\n * =00000000000000000000000000000000\n * =0\n * 直接使用更加方便,比如判断是否有删除和更新权限\n * if (auths &amp; UPDATE &amp;&amp; auths &amp; DELETE)) <span class=\"token punctuation\">{</span>\n *  ...\n * <span class=\"token punctuation\">}</span>\n */</span>\n</code></pre>\n<h3 id=\"是否不包含某个标志\">是否不包含某个标志</h3>\n<pre><code class=\"language-js\"><span class=\"token comment\">// before</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">containFlag</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">auths<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token spread operator\">...</span>flags<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> \n  flags<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">every</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">flag</span> <span class=\"token arrow operator\">=></span> auths<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">includes</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//after</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">containFlag</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">auths<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token spread operator\">...</span>flags<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span>\n  flags<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">every</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">flag</span> <span class=\"token arrow operator\">=></span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>auths <span class=\"token operator\">&amp;</span> flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h3 id=\"判断是否只有某个标志\">判断是否只有某个标志</h3>\n<p>这个跟平时一样，只要使用全等操作符就可以了</p>\n<pre><code class=\"language-js\"><span class=\"token comment\">// before</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">equalFlag</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">auths<span class=\"token punctuation\">,</span> flag</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span>\n  flags<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">===</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> flags<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> flag\n\n<span class=\"token comment\">//after</span>\n<span class=\"token comment\">// 判断是否只有某个标志直接使用全等即可</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">equalFlag</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">auths<span class=\"token punctuation\">,</span> flag</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> auths <span class=\"token operator\">===</span> flag\n<span class=\"token comment\">/* 直接使用更方便\n * if (auths === UPDATE) {\n *  ...\n * }\n */</span>\n \n</code></pre>\n<h3 id=\"添加标志\">添加标志</h3>\n<p>其实添加标志与初始化一样,只需要使用 <code>按位或(|)</code>直接联合即可,而且不需要判断当前是否有,因为加入有的话使用<code>按位或(|)</code>会保持跟之前一致</p>\n<pre><code class=\"language-js\"><span class=\"token comment\">// before</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addFlag</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">auths<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token spread operator\">...</span>flags<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  flags<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">flag</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">containFlag</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      auths<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// after</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addFlag</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">auths<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token spread operator\">...</span>flags<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  flags<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">flag</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    auths <span class=\"token operator\">|=</span> flag\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token doc-comment comment\">/**\n * 比如 auths | DELETE运算结果为\n *  00000000000000000000000000001011\n *  00000000000000000000000000000100\n * =00000000000000000000000000001111\n * 直接使用更加方便,要添加权限,z\n * auths = auths | DELETE | QUERY\n */</span>\n</code></pre>\n<h3 id=\"删除标志\">删除标志</h3>\n<p>删除标志本质上是要将要删除标志中1的位数在变成0,这有些麻烦,因为无论是<code>按位或(|)</code>或者 <code>按位与(&amp;)</code> 都不能满足,<code>按位或(|)</code>在有这个标志时不变,在不存在这个标志时会添加,<code>按位与(&amp;)</code>也不行,在没有这个标志时会全部清除,在有这个标志时会仅剩这个标志.这时候我们就要引入上文说的<code>按位非 (~)</code>运算符了,我们可以先将要删除的标志取<code>按位非</code>,这时候除了表示标志的位数为0其他都为1,这时候我们<code>按位与(&amp;)</code>联合这个处理后的数字,就能得到我们想要的效果了</p>\n<pre><code class=\"language-js\"><span class=\"token comment\">// before</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">removeFlag</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">auths<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token spread operator\">...</span>flags<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  flags<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">flag</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> index <span class=\"token operator\">=</span> auths<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">indexOf</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      flags<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">splice</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// after</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">removeFlag</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">auths<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token spread operator\">...</span>flags<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  flags<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">flag</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    auths <span class=\"token operator\">&amp;=</span> <span class=\"token operator\">~</span>flag\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token doc-comment comment\">/**\n * 比如 auths &amp;= ~DELETE运算结果为\n *  UPDATE            00000000000000000000000000000010\n *  ~UPDATE           11111111111111111111111111111101\n *  auths             00000000000000000000000000001011\n *  auths &amp;= ~UPDATE  00000000000000000000000000001001\n * 直接使用更加方便,要删除的权限,\n * auths &amp; ~DELETE\n */</span>\n</code></pre>\n<h2 id=\"优缺点\">优缺点</h2>\n<p><strong>优点</strong>:相对于数组来说使用位运算符的速度要快得多,特别是状态比较多,或者使用比较频繁的情况下,而且对于熟悉位运算符的人来说,更加直观.<br><br><strong>缺点</strong>:正如优点所对应的一样,对于不熟悉位运算符的开发同学,这一定是魔鬼写法,非常不友好.而且<code>左移(&gt;&gt;)</code>运算符最多只支持32位左移,比如<code>numToBinaryString(1 &lt;&lt; 30)</code>结果就到达 <code>1000000000000000000000000000000</code>了,所以这种管理标志方法最多只能支持31中标志,不过已经足够了,因为大部分应用是不超过31种标志的.</p>\n","desc":"什么是标志？标志就是显示事物特征，便于识别的记号。在程序中我们通常使用枚举来表示标志，比如权限标志：\n// authorityFlag.js\n\n// 是否有查询权限\nconst QUERY = 1\n// 是否有更新权限\nconst UPDATE = 2\n// 是否有删除权限\nconst DELETE","column":{"title":"javascript笔录","id":"8c7c4031e54f97dba0b7"}}